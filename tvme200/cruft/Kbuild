###############################################################################
# @file Kbuild.linux
#
# @brief Kbuild for compiling linux drivers
#
# @author Yury GEORGIEVSKIY, CERN.
#
# @date Created on 08/04/2009
#
# @note For developers @e only. To work && test git branches - use .__kitchen
#       directory with your username inside.
#
# @b example
#    Let's say you want to work on your own CDCM branch. What should be done is:
#      1. -> cd .__kitchen/<usrname>
#
#      2. -> git-clone ../../cdcm
#
#      3. Do modifications in the cloned CDCM
#         (for example in __kitchen/ygeorgie/cdcm)
#
#      4. Recompile your local copy of CDCM for desired kernel version
#	  -> make KVER=2.6.29.1-rt7
#
#      5. Check if your driver is still working with it.
#         To do this - cd to the driver dir.
#         4.1. -> cd coht/nulldrvr/driver
#         4.2 compile with local CDCM. Example:
#             make clean CPU=L865;
#             make CPU=L865 \
#	      CDCM_D=/acc/src/dsc/drivers/coht/.__kitchen/ygeorgie/cdcm
#
#      6. Commit changes in the main CDCM branch:
#         -> git-commit
###############################################################################

# Include specific Makefile to get driver configuraion settings
# Makefile from current directory supress one from upper level
include $(shell if [ -e $(M)/Makefile.specific ]; then \
		echo $(M)/Makefile.specific; \
	else \
		echo $(M)/../Makefile.specific; \
	fi)


# Include generic definitions
include $(ROOTDIR)/makefiles/Kbuild.include

# Ensure lowecase drivername
DRIVER_NAME := $(shell echo $(DRIVER_NAME) | tr "[:upper:]" "[:lower:]")

# User can compile with his own version of CDCM
ifeq ("$(origin CDCM_D)", "command line")
	CDCM_INC_DIR := $(shell echo "$(CDCM_D)" | sed -e 's:\([^/]\)$$:\1/:g' | sed -e 's:\(/.*/\).*/$$:\1:g')
else
	CDCM_INC_DIR := $(ROOTDIR)
endif

# User can provide it's own CDCM directory
CDCM_D ?= $(ROOTDIR)/cdcm

# Do relative pathes
CDCM_D_REL := $(call abs2rel, $(CDCM_D)/$(CPU)/$(KVER)/, $(M)/)
UTIL_D_REL := $(call abs2rel, $(ROOTDIR)/utils/driver/$(CPU)/$(KVER)/, $(M)/)

#  Extra CC flags && needed pathes
#  -I$(ROOTDIR) - This dir is not included directly because user can use it's
#+ own CDCM version.
# Not using [ccflags-y] _ONLY_ to be able to compile with 2.6.9
# [ccflags-y] should be used when 2.6.9 is not used anymore
EXTRA_CFLAGS += \
	-I$(M) \
	-I$(CDCM_INC_DIR) \
	-I$(M)/../include \
	-I$(ROOTDIR)/skel/driver \
	-I$(ROOTDIR)/utils/driver \
	\
	-DDRIVER_NAME=\"$(DRIVER_NAME)\" \
	-DCPU=$(CPU) \
	-DCOMPILE_TIME=$(shell date --utc +%s)

# What we need to build
obj-m := $(DRIVER_NAME).o

#  Virgin driver (without any extra features) consists of _all_  '*.c'
#+ files in './driver' directory.
#+ User can already add some extra src files to compile in specific Kbuild
$(DRIVER_NAME)-y := $(OBJFILES)

# Took examples from xtensa/boot/lib
# Copy extra *.c files into local dir for compilation
quiet_cmd_copy_xtraf = COPY    $@
      cmd_copy_xtraf = cat $< > $@

# Remove already compiled extra *.c files from local dir
quiet_cmd_remove_xtraf = RM    $<
      cmd_remove_xtraf = rm -f $<

# User can define extra *.c files to compile driver
ifdef XTRA_DSRC
xtra = $(addsuffix $(SRCSFXS), $(notdir $(basename $(XTRA_DSRC))))

$(addprefix $(obj)/,$(xtra)): $(obj)/%: $(addsuffix %, $(dir $(XTRA_DSRC)))
	$(call cmd,copy_xtraf)

$(DRIVER_NAME)-y += $(xtra:.c=.o)

$(addprefix $(obj)/,$(xtra:.c=.o)): %.o: %.c
	$(call if_changed_rule,cc_o_c)
	$(call cmd,remove_xtraf)
endif #XTRA_DSRC

# If driver is 'skel' compliant?
ifeq ($(IS_SKEL),y)

# 'skel' hosting dir
SKEL_D = $(ROOTDIR)/skel/driver

# Get all *.c files from there
SKELSRCF = $(wildcard $(SKEL_D)/*.c)

# Kill all ',backup' files
FLTSKELFILES = $(filter-out $(SKEL_D)/$(comma)%, $(filter $(addprefix %, $(SRCSFXS)),$(SKELSRCF)))

# Final list of 'skel' *.c files
skel = $(addsuffix $(SRCSFXS),$(notdir $(basename $(FLTSKELFILES))))

# We copy 'skel' *.c files locally for compilation
# Check 'Static Pattern Rules' in makefile manual
$(addprefix $(obj)/,$(skel)): $(obj)/%: $(SKEL_D)/%
	$(call cmd,copy_xtraf)

$(DRIVER_NAME)-y += $(skel:.c=.o)

#  Should redefine .o compilation rule as skel *.c
#+ files should be removed after compilation
$(addprefix $(obj)/,$(skel:.c=.o)): %.o: %.c
	$(call if_changed_rule,cc_o_c)
	$(call cmd,remove_xtraf)

# 'skel' is CDCM compliant with VME && PCI bus support, using XML library
USE_XML        := y
IS_CDCM        := y
CONFIG_BUS_PCI ?= y
CONFIG_BUS_VME ?= y
endif # IS_SKEL


# CDCM driver types
# This is VME
ifeq ($(CONFIG_BUS_VME),y)
ccflags-y += -DCONFIG_BUS_VME
# 'vmebridge' hosting dir
VMEB_D = $(call abs2rel, $(ROOTDIR)/vmebridge/driver/$(CPU)/$(KVER)/, $(M)/)

cdcmvme-$(CONFIG_BUS_VME) += cdcmVme.o

quiet_cmd_copy_symvers = COPY    $@
      cmd_copy_symvers = cat $< > $@

# We need to copy 'vmebus' Module.symvers file locally to get
# rid of compilation warnings.

# $(extra-y) and $(targets) is _not_ working here
always += Module.symvers

# We need to copy .symvers file locally
$(obj)/Module.symvers: $(VMEB_D)Module.symvers
	$(call cmd,copy_symvers)
else
ccflags-y += -UCONFIG_BUS_VME
endif # CONFIG_BUS_VME

# This is PCI
ifeq ($(CONFIG_BUS_PCI), y)
ccflags-y += -DCONFIG_BUS_PCI
cdcmpci-$(CONFIG_BUS_PCI) += cdcmPci.o cdcmPciDmaLinux.o
else
ccflags-y += -UCONFIG_BUS_PCI
endif # CONFIG_BUS_PCI

# This driver was generated by driverGen
ifeq ($(CONFIG_IS_DG),y)
ccflags-y += -DCONFIG_IS_DG
dgpci-$(CONFIG_BUS_PCI) = cdcm-driver-gen-pci.o
dgvme-$(CONFIG_BUS_VME) = cdcm-driver-gen-vme.o
dg-$(CONFIG_IS_DG) = $(dgpci-y) $(dgvme-y)
endif # CONFIG_IS_DG

# CDCM backbone
cdcm-$(IS_CDCM) := $(addprefix $(CDCM_D_REL), \
		   cdcmBoth.o cdcmDrvr.o cdcmLynxAPI.o \
		   cdcmMem.o cdcmThread.o cdcmTime.o \
		   $(cdcmvme-y) $(cdcmpci-y) $(dg-y))

# Major driver Utilities
utils-$(USE_UTILS) := $(addprefix $(UTIL_D_REL), drvr_load_file.o drvr_utils.o)

# Extra driver utilities
xml-$(USE_XML)         := $(addprefix $(UTIL_D_REL), libinstkernel.o)
plx9030-$(USE_PLX9030) := $(addprefix $(UTIL_D_REL), plx9030.o)
plx9656-$(USE_PLX9656) := $(addprefix $(UTIL_D_REL), plx9656.o)

# Build-up final version with extra things for the driver
$(DRIVER_NAME)-y += $(cdcm-y) $(utils-y) $(xml-y) $(plx9030-y) $(plx9656-y)
