!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
BIG_ENDIAN	driver/cvorb_priv.h	29;"	d
BIT	driver/cvorb_hw.h	11;"	d
CFLAGS	driver/Makefile	/^CFLAGS=-g -Wall -Wstrict-prototypessss$/;"	m
CFLAGS	lib/Makefile	/^CFLAGS := -Wall -g -I. -I..\/include -I..\/..\/include$/;"	m
CFLAGS	lib/examples/Makefile	/^CFLAGS := -Wall -D_GNU_SOURCE -g -I. -I$(INCDIR)$/;"	m
CFLAGS	test/Makefile	/^CFLAGS := -Wall -g -I$(INCDIR) -I..\/..\/include -I..\/..\/utils\/extest -I..\/lib \\$/;"	m
CHANNEL_NR	lib/examples/status.c	18;"	d	file:
CPU	driver/Makefile	/^CPU=L865$/;"	m
CPU	lib/Makefile	/^CPU ?= L865$/;"	m
CPU	test/Makefile	/^CPU ?= L865$/;"	m
CVORB_ADDRESS_MODIFIER	driver/cvorb_hw.h	18;"	d
CVORB_ATTR_BOARD	lib/cvorbdev.h	/^        CVORB_ATTR_BOARD,$/;"	e	enum:cvorb_attr_scope
CVORB_ATTR_CHANNEL	lib/cvorbdev.h	/^        CVORB_ATTR_CHANNEL,$/;"	e	enum:cvorb_attr_scope
CVORB_ATTR_SUBMODULE	lib/cvorbdev.h	/^        CVORB_ATTR_SUBMODULE,$/;"	e	enum:cvorb_attr_scope
CVORB_CHANNELS	driver/cvorb_hw.h	28;"	d
CVORB_CHANNEL_ATTR	driver/cvorb_sysfs.c	54;"	d	file:
CVORB_CH_BUSY	include/cvorb.h	52;"	d
CVORB_CH_CONFIG	driver/cvorb_hw.h	168;"	d
CVORB_CH_DISABLE	driver/cvorb_hw.h	170;"	d
CVORB_CH_ENABLE	driver/cvorb_hw.h	169;"	d
CVORB_CH_ENABLE_FCN_MASK_H	driver/cvorb_hw.h	181;"	d
CVORB_CH_ENABLE_FCN_MASK_L	driver/cvorb_hw.h	182;"	d
CVORB_CH_ENABLE_MASK	driver/cvorb_hw.h	171;"	d
CVORB_CH_FCN_PAUSED	include/cvorb.h	53;"	d
CVORB_CH_MAX_STATES	test/cvorbtest.h	/^static const int CVORB_CH_MAX_STATES = 11;$/;"	v
CVORB_CH_REPEAT_FCN	driver/cvorb_hw.h	188;"	d
CVORB_CH_SELECT_FCN	driver/cvorb_hw.h	176;"	d
CVORB_CH_SERIAL_LINK_ERR	include/cvorb.h	54;"	d
CVORB_CH_SIZE	driver/cvorb_hw.h	158;"	d
CVORB_CH_STATE_MASK	test/cvorbtest.h	9;"	d
CVORB_CH_STATE_SHIFT	test/cvorbtest.h	8;"	d
CVORB_CH_STATUS	driver/cvorb_hw.h	163;"	d
CVORB_DACCTL	driver/cvorb_hw.h	143;"	d
CVORB_DACCTL_ADDR	driver/cvorb_hw.h	145;"	d
CVORB_DACCTL_DATA	driver/cvorb_hw.h	144;"	d
CVORB_DACCTL_RW	driver/cvorb_hw.h	147;"	d
CVORB_DACCTL_UP2DATE	driver/cvorb_hw.h	148;"	d
CVORB_DATA_SIZE	driver/cvorb_hw.h	20;"	d
CVORB_DEBUG_IO	driver/cvorb_priv.h	20;"	d
CVORB_EVT_START	include/cvorb.h	/^        CVORB_EVT_START,$/;"	e	enum:cvorb_trigger
CVORB_EVT_STOP	include/cvorb.h	/^        CVORB_EVT_STOP$/;"	e	enum:cvorb_trigger
CVORB_FCT_HEADER_SZ	include/cvorb.h	76;"	d
CVORB_FOOTER_SZ	include/cvorb.h	78;"	d
CVORB_FPGA_RESET	driver/cvorb_hw.h	82;"	d
CVORB_FULL	driver/cvorb_priv.h	/^        CVORB_FULL,$/;"	e	enum:cvorb_reset
CVORB_HW_VER_SIZE	include/cvorb.h	21;"	d
CVORB_IOCTL_GET_FCT	include/cvorb.h	97;"	d
CVORB_IOCTL_SET_FCT	include/cvorb.h	96;"	d
CVORB_MAX_BOARDS	driver/cvorb_priv.h	22;"	d
CVORB_MAX_CH_NR	include/cvorb.h	12;"	d
CVORB_MAX_FCT_NR	include/cvorb.h	15;"	d
CVORB_MAX_STEPS	include/cvorb.h	80;"	d
CVORB_MAX_STEP_SIZE	include/cvorb.h	81;"	d
CVORB_MAX_TIME_MIN_STEP	include/cvorb.h	83;"	d
CVORB_MAX_VECTOR	include/cvorb.h	18;"	d
CVORB_MIN_STEP_SIZE	include/cvorb.h	79;"	d
CVORB_NEG_PULSE	include/cvorb.h	/^        CVORB_NEG_PULSE$/;"	e	enum:cvorb_input_polarity
CVORB_PATH_SIZE	include/libcvorb.h	16;"	d
CVORB_PCB_LSB	driver/cvorb_hw.h	60;"	d
CVORB_PCB_MSB	driver/cvorb_hw.h	55;"	d
CVORB_POS_PULSE	include/cvorb.h	/^        CVORB_POS_PULSE,$/;"	e	enum:cvorb_input_polarity
CVORB_START	include/cvorb.h	/^        CVORB_START,$/;"	e	enum:cvorb_trigger
CVORB_STOP	include/cvorb.h	/^        CVORB_STOP,$/;"	e	enum:cvorb_trigger
CVORB_SUBMODULES	driver/cvorb_hw.h	26;"	d
CVORB_SUBMODULE_1	driver/cvorb_priv.h	/^        CVORB_SUBMODULE_1,$/;"	e	enum:cvorb_reset
CVORB_SUBMODULE_2	driver/cvorb_priv.h	/^        CVORB_SUBMODULE_2$/;"	e	enum:cvorb_reset
CVORB_SUBMODULE_ATTR	driver/cvorb_sysfs.c	252;"	d	file:
CVORB_SUBMODULE_BUSY	driver/cvorb_hw.h	98;"	d
CVORB_SUBMODULE_CONFIG	driver/cvorb_hw.h	105;"	d
CVORB_SUBMODULE_CTL	driver/cvorb_hw.h	80;"	d
CVORB_SUBMODULE_DAC_SEL_MASK	driver/cvorb_hw.h	111;"	d
CVORB_SUBMODULE_DAC_SEL_SHIFT	driver/cvorb_hw.h	110;"	d
CVORB_SUBMODULE_EVSTART	driver/cvorb_hw.h	84;"	d
CVORB_SUBMODULE_EVSTOP	driver/cvorb_hw.h	86;"	d
CVORB_SUBMODULE_IDLED	driver/cvorb_hw.h	99;"	d
CVORB_SUBMODULE_INPOL_MASK	driver/cvorb_hw.h	108;"	d
CVORB_SUBMODULE_INPOL_SHIFT	driver/cvorb_hw.h	107;"	d
CVORB_SUBMODULE_LEDS_SEL_MASK	driver/cvorb_hw.h	117;"	d
CVORB_SUBMODULE_LEDS_SEL_SHIFT	driver/cvorb_hw.h	116;"	d
CVORB_SUBMODULE_OFFSET	driver/cvorb_hw.h	25;"	d
CVORB_SUBMODULE_OPTICAL_SEL_MASK	driver/cvorb_hw.h	114;"	d
CVORB_SUBMODULE_OPTICAL_SEL_SHIFT	driver/cvorb_hw.h	113;"	d
CVORB_SUBMODULE_OPT_EN_MASK	driver/cvorb_hw.h	120;"	d
CVORB_SUBMODULE_OPT_EN_SHIFT	driver/cvorb_hw.h	119;"	d
CVORB_SUBMODULE_READY	driver/cvorb_hw.h	96;"	d
CVORB_SUBMODULE_RESET	driver/cvorb_hw.h	81;"	d
CVORB_SUBMODULE_SRAM_ADDR	driver/cvorb_hw.h	127;"	d
CVORB_SUBMODULE_SRAM_BUSY	driver/cvorb_hw.h	97;"	d
CVORB_SUBMODULE_SRAM_CHAN_SHIFT	driver/cvorb_hw.h	129;"	d
CVORB_SUBMODULE_SRAM_DATA	driver/cvorb_hw.h	137;"	d
CVORB_SUBMODULE_SRAM_FUNC_SHIFT	driver/cvorb_hw.h	130;"	d
CVORB_SUBMODULE_START	driver/cvorb_hw.h	83;"	d
CVORB_SUBMODULE_STATUS	driver/cvorb_hw.h	95;"	d
CVORB_SUBMODULE_STOP	driver/cvorb_hw.h	85;"	d
CVORB_SUBMOD_BUSY	include/cvorb.h	46;"	d
CVORB_SUBMOD_PAUSE	include/cvorb.h	47;"	d
CVORB_SUBMOD_READY	include/cvorb.h	44;"	d
CVORB_SUBMOD_SRAM_BUSY	include/cvorb.h	45;"	d
CVORB_TEMP	driver/cvorb_hw.h	68;"	d
CVORB_VCT_SZ	include/cvorb.h	77;"	d
CVORB_VERSION	driver/cvorb_hw.h	42;"	d
CVORB_VERSION_AS_STRING_SZ	driver/cvorb_hw.h	49;"	d
CVORB_VERSION_FW_MASK	driver/cvorb_hw.h	44;"	d
CVORB_VERSION_FW_SHIFT	driver/cvorb_hw.h	43;"	d
CVORB_VERSION_HUNDREDTHS_SHIFT	driver/cvorb_hw.h	48;"	d
CVORB_VERSION_TENS_SHIFT	driver/cvorb_hw.h	45;"	d
CVORB_VERSION_TENTHS_SHIFT	driver/cvorb_hw.h	47;"	d
CVORB_VERSION_UNITS_SHIFT	driver/cvorb_hw.h	46;"	d
CVORB_WINDOW_LENGTH	driver/cvorb_hw.h	19;"	d
CmdCH	test/cvorbtest.c	/^        CmdCH = CmdUSR,$/;"	e	enum:_tag_cmd_id	file:
CmdCH_DISABLE	test/cvorbtest.c	/^        CmdCH_DISABLE,$/;"	e	enum:_tag_cmd_id	file:
CmdCH_ENABLE	test/cvorbtest.c	/^        CmdCH_ENABLE,$/;"	e	enum:_tag_cmd_id	file:
CmdCH_NEXT	test/cvorbtest.c	/^        CmdCH_NEXT,$/;"	e	enum:_tag_cmd_id	file:
CmdCH_REPEAT_COUNT	test/cvorbtest.c	/^        CmdCH_REPEAT_COUNT,$/;"	e	enum:_tag_cmd_id	file:
CmdCH_SRC	test/cvorbtest.c	/^        CmdCH_SRC,$/;"	e	enum:_tag_cmd_id	file:
CmdCH_STATUS	test/cvorbtest.c	/^        CmdCH_STATUS,$/;"	e	enum:_tag_cmd_id	file:
CmdDEVICE	test/cvorbtest.c	/^        CmdDEVICE,$/;"	e	enum:_tag_cmd_id	file:
CmdDEVICE_NEXT	test/cvorbtest.c	/^        CmdDEVICE_NEXT,$/;"	e	enum:_tag_cmd_id	file:
CmdFCN_DISABLE	test/cvorbtest.c	/^        CmdFCN_DISABLE,$/;"	e	enum:_tag_cmd_id	file:
CmdFCN_ENABLE	test/cvorbtest.c	/^        CmdFCN_ENABLE,$/;"	e	enum:_tag_cmd_id	file:
CmdFCN_ENABLE_MASK	test/cvorbtest.c	/^        CmdFCN_ENABLE_MASK,$/;"	e	enum:_tag_cmd_id	file:
CmdFCN_LOAD	test/cvorbtest.c	/^        CmdFCN_LOAD,$/;"	e	enum:_tag_cmd_id	file:
CmdFCN_LOAD_PLAY	test/cvorbtest.c	/^        CmdFCN_LOAD_PLAY,$/;"	e	enum:_tag_cmd_id	file:
CmdFCN_PLAY	test/cvorbtest.c	/^        CmdFCN_PLAY,$/;"	e	enum:_tag_cmd_id	file:
CmdFCN_READ	test/cvorbtest.c	/^        CmdFCN_READ,$/;"	e	enum:_tag_cmd_id	file:
CmdFCN_SELECT	test/cvorbtest.c	/^        CmdFCN_SELECT,$/;"	e	enum:_tag_cmd_id	file:
CmdHW_RESET	test/cvorbtest.c	/^        CmdHW_RESET,$/;"	e	enum:_tag_cmd_id	file:
CmdHW_VERSION	test/cvorbtest.c	/^        CmdHW_VERSION,$/;"	e	enum:_tag_cmd_id	file:
CmdLAST	test/cvorbtest.c	/^        CmdLAST$/;"	e	enum:_tag_cmd_id	file:
CmdPCB	test/cvorbtest.c	/^        CmdPCB,$/;"	e	enum:_tag_cmd_id	file:
CmdSUBMODULE_EN_OPTOUT	test/cvorbtest.c	/^        CmdSUBMODULE_EN_OPTOUT,$/;"	e	enum:_tag_cmd_id	file:
CmdSUBMODULE_INPOL	test/cvorbtest.c	/^        CmdSUBMODULE_INPOL,$/;"	e	enum:_tag_cmd_id	file:
CmdSUBMODULE_RESET	test/cvorbtest.c	/^        CmdSUBMODULE_RESET,$/;"	e	enum:_tag_cmd_id	file:
CmdSUBMODULE_STATUS	test/cvorbtest.c	/^        CmdSUBMODULE_STATUS,$/;"	e	enum:_tag_cmd_id	file:
CmdSUBMODULE_TRIGGER	test/cvorbtest.c	/^        CmdSUBMODULE_TRIGGER,$/;"	e	enum:_tag_cmd_id	file:
CmdTEMP	test/cvorbtest.c	/^        CmdTEMP,$/;"	e	enum:_tag_cmd_id	file:
DEVICE_ATTR	driver/cvorb_sysfs.c	/^static DEVICE_ATTR(description, S_IRUGO, cvorb_show_description, NULL);$/;"	p	file:
DEVICE_ATTR	driver/cvorb_sysfs.c	/^static DEVICE_ATTR(hw_version, S_IRUGO, cvorb_show_hw_version, NULL);$/;"	p	file:
DEVICE_ATTR	driver/cvorb_sysfs.c	/^static DEVICE_ATTR(pcb_id, S_IRUGO, cvorb_show_pcb_id, NULL);$/;"	p	file:
DEVICE_ATTR	driver/cvorb_sysfs.c	/^static DEVICE_ATTR(reset, S_IWUSR, NULL, cvorb_store_reset);$/;"	p	file:
DEVICE_ATTR	driver/cvorb_sysfs.c	/^static DEVICE_ATTR(temperature, S_IRUGO, cvorb_show_temperature, NULL);$/;"	p	file:
DOXY_DIR	lib/Makefile	/^DOXY_DIR := doxygen_output$/;"	m
DOXY_FILES	lib/Makefile	/^DOXY_FILES := cvorb.c error.c $(HLIBCVORB) $(HCVORB)$/;"	m
DOXY_INSTDIR	lib/Makefile	/^DOXY_INSTDIR := \/acc\/doc\/html\/private\/coht\/doxy\/cvorb$/;"	m
DRIVER_NAME	driver/cvorb_func.c	26;"	d	file:
DRIVER_NAME	driver/cvorb_priv.h	16;"	d
EXAMPLES_DIR	lib/Makefile	/^EXAMPLES_DIR := examples$/;"	m
HCVORB	lib/Makefile	/^HCVORB := ..\/include\/cvorb.h$/;"	m
HLIBCVORB	lib/Makefile	/^HLIBCVORB := ..\/include\/libcvorb.h$/;"	m
INCDIR	lib/examples/Makefile	/^INCDIR := ..\/..\/include$/;"	m
INCDIR	test/Makefile	/^INCDIR := ..\/include$/;"	m
KERNELSRC	driver/Makefile	/^KERNELSRC=\/acc\/sys\/$(CPU)\/usr\/src\/kernels\/$(KVER)$/;"	m
KVER	driver/Makefile	/^KVER=2.6.24.7-rt27$/;"	m
LDLIBS	lib/examples/Makefile	/^LDLIBS := -lm$/;"	m
LDLIBS	test/Makefile	/^LDLIBS= -lcvorb.$(CPU) -lutils.$(CPU) -lreadline -ltermcap -lxml2 -lz -lrt -lm $/;"	m
LIBCVORB	lib/Makefile	/^LIBCVORB := libcvorb.$(CPU).a $/;"	m
LIBCVORB	lib/examples/Makefile	/^LIBCVORB := ..\/libcvorb.$(CPU).a$/;"	m
LIBCVORB_DEBUG	lib/libinternal.h	15;"	d
LIBCVORB_EINVTR	lib/cvorb_errno.h	7;"	d
LIBCVORB_ENODEV	lib/cvorb_errno.h	9;"	d
LIBCVORB_ENOTSUPP	lib/cvorb_errno.h	10;"	d
LIBCVORB_ERROR_BASE	lib/cvorb_errno.h	6;"	d
LIBCVORB_EVTRTOOLONG	lib/cvorb_errno.h	8;"	d
LIBCVORB_NR_ERRCODES	lib/error.c	28;"	d	file:
LIBCVORB_VERSION	lib/cvorb.c	27;"	d	file:
LITTLE_ENDIAN	driver/cvorb_priv.h	25;"	d
LOADLIBES	test/Makefile	/^LOADLIBES := -L..\/lib\/ -L..\/..\/utils\/install -L\/usr\/lib -L\/acc\/sys\/$(CPU)\/usr\/lib$/;"	m
M	driver/Makefile	/^	make -C $(KERNELSRC) M=`pwd` KVER=$(KVER) CPU=$(CPU) modules $/;"	m
M	driver/Makefile	/^	make -C $(KERNELSRC) M=`pwd` clean$/;"	m
MAX_STR_SZ	test/cvorbtest.c	42;"	d	file:
MAX_VTF_FILES	test/cvorbtest.c	41;"	d	file:
MODULE_NR	lib/examples/lock.c	17;"	d	file:
MODULE_NR	lib/examples/pcb.c	15;"	d	file:
MODULE_NR	lib/examples/status.c	15;"	d	file:
MODULE_NR	lib/examples/version.c	15;"	d	file:
MS_UNIT	test/time_stamp_counter.h	42;"	d
NS_UNIT	test/time_stamp_counter.h	44;"	d
OBJS	lib/examples/Makefile	/^OBJS := $(SRCS:.c=.$(CPU))$/;"	m
OUTPUTDIR	driver/Makefile	/^OUTPUTDIR=$(PWD)\/$(CPU)\/$(KVER)$/;"	m
PCI_SOURCE	driver/cvorb_dma.c	20;"	d	file:
PFX	driver/cvorb_func.c	27;"	d	file:
PFX	driver/cvorb_priv.h	17;"	d
PROGNAME	lib/examples/lock.c	19;"	d	file:
PROGNAME	lib/examples/pcb.c	17;"	d	file:
PROGNAME	lib/examples/version.c	17;"	d	file:
SHOW_POL	test/cvorbtest.c	332;"	d	file:
SRCS	lib/examples/Makefile	/^SRCS :=	status.c \\$/;"	m
S_UNIT	test/time_stamp_counter.h	41;"	d
USE_DMA	lib/cvorb.c	28;"	d	file:
VME_SOURCE	driver/cvorb_dma.c	19;"	d	file:
VPATH	test/Makefile	/^VPATH = ..\/..\/utils\/extest ..\/lib$/;"	m
WITHIN_RANGE	lib/cvorb.c	30;"	d	file:
WITHIN_RANGE	test/vtf/conv.c	32;"	d	file:
YS_UNIT	test/time_stamp_counter.h	43;"	d
_CVORBDEV_H_	lib/cvorbdev.h	2;"	d
_CVORBTEST_H_	test/cvorbtest.h	2;"	d
_CVORB_ERRNO_H_	lib/cvorb_errno.h	2;"	d
_CVORB_HW_H_	driver/cvorb_hw.h	8;"	d
_CVORB_H_	include/cvorb.h	2;"	d
_CVORB_LIBINTERNAL_H_	lib/libinternal.h	2;"	d
_CVORB_PRIV_H	driver/cvorb_priv.h	8;"	d
_GNU_SOURCE	test/vtf/conv.c	15;"	d	file:
_LIBCVORB_H_	include/libcvorb.h	2;"	d
_MY_STRINGIFY_H_	lib/examples/my_stringify.h	2;"	d
_TIME_STAMP_COUNTER_	test/time_stamp_counter.h	32;"	d
__anon1::t	test/vtf/conv.c	/^	double t;$/;"	m	struct:__anon1	file:	access:public
__anon1::v	test/vtf/conv.c	/^	ushort v;$/;"	m	struct:__anon1	file:	access:public
__attribute_used__	driver/cvorb.mod.c	/^__attribute_used__$/;"	v	file:
__cvorb_dma	driver/cvorb_dma.c	/^__cvorb_dma(struct device *dev, unsigned int vme_addr, enum vme_address_modifier am,$/;"	f	file:	signature:(struct device *dev, unsigned int vme_addr, enum vme_address_modifier am, void *addr, ssize_t size, int src)
__cvorb_errno	lib/error.c	/^int __cvorb_errno;$/;"	v
__cvorb_error_strings	lib/error.c	/^char *__cvorb_error_strings[] = {$/;"	v
__cvorb_initialize	lib/cvorb.c	/^static void __cvorb_initialize(void)$/;"	f	file:	signature:(void)
__cvorb_internal_error	lib/error.c	/^void __cvorb_internal_error(int err)$/;"	f	signature:(int err)
__cvorb_internal_error	lib/libinternal.h	/^void __cvorb_internal_error(int error_number);$/;"	p	signature:(int error_number)
__cvorb_lib_error	lib/error.c	/^void __cvorb_lib_error(const char *string, int err)$/;"	f	signature:(const char *string, int err)
__cvorb_lib_error	lib/libinternal.h	/^void __cvorb_lib_error(const char* string, int err);$/;"	p	signature:(const char* string, int err)
__cvorb_libc_error	lib/error.c	/^void __cvorb_libc_error(const char *string)$/;"	f	signature:(const char *string)
__cvorb_libc_error	lib/libinternal.h	/^void __cvorb_libc_error(const char *string);$/;"	p	signature:(const char *string)
__cvorb_loglevel	lib/error.c	/^int __cvorb_loglevel = 1;$/;"	v
__cvorb_param_error	lib/error.c	/^void __cvorb_param_error(int err)$/;"	f	signature:(int err)
__cvorb_param_error	lib/libinternal.h	/^void __cvorb_param_error(int err);$/;"	p	signature:(int err)
__cvorb_reset	driver/cvorb_func.c	/^static void __cvorb_reset(struct cvorb_dev *cvorb)$/;"	f	file:	signature:(struct cvorb_dev *cvorb)
__cvorb_set_fcn	driver/cvorb_func.c	/^static int __cvorb_set_fcn(struct cvorb_dev *cvorb, struct cvorb_hw_fcn *fcn)$/;"	f	file:	signature:(struct cvorb_dev *cvorb, struct cvorb_hw_fcn *fcn)
__cvorb_sram_busy	driver/cvorb_func.c	/^static int __cvorb_sram_busy(struct cvorb_submodule* submodule)$/;"	f	file:	signature:(struct cvorb_submodule* submodule)
__cvorb_submodule_reset	driver/cvorb_func.c	/^static void __cvorb_submodule_reset(struct cvorb_submodule *submodule)$/;"	f	file:	signature:(struct cvorb_submodule *submodule)
__cvorb_t	include/libcvorb.h	/^struct __cvorb_t {$/;"	s
__cvorb_t::fd	include/libcvorb.h	/^	int fd;$/;"	m	struct:__cvorb_t	access:public
__cvorb_t::hw_version	include/libcvorb.h	/^        char hw_version[CVORB_HW_VER_SIZE];$/;"	m	struct:__cvorb_t	access:public
__cvorb_t::lun	include/libcvorb.h	/^        int lun;$/;"	m	struct:__cvorb_t	access:public
__cvorb_t::pcb_id	include/libcvorb.h	/^        uint64_t pcb_id;$/;"	m	struct:__cvorb_t	access:public
__cvorb_t::sysfs_path	include/libcvorb.h	/^        char sysfs_path[CVORB_PATH_SIZE];$/;"	m	struct:__cvorb_t	access:public
__h_device	test/cvorbtest.c	/^static int __h_device(int index)$/;"	f	file:	signature:(int index)
__this_module	driver/cvorb.mod.c	/^struct module __this_module$/;"	v	typeref:struct:module
_tag_cmd_id	test/cvorbtest.c	/^enum _tag_cmd_id {$/;"	g	file:
attr	driver/cvorb_sysfs.c	/^        struct attribute attr;$/;"	m	struct:cvorb_channel_attribute	typeref:struct:cvorb_channel_attribute::attribute	file:	access:public
attr	driver/cvorb_sysfs.c	/^        struct attribute attr;$/;"	m	struct:cvorb_submodule_attribute	typeref:struct:cvorb_submodule_attribute::attribute	file:	access:public
base_address	driver/cvorb_drvr.c	/^static int base_address[CVORB_MAX_BOARDS];$/;"	v	file:
build_cvorbpath	lib/cvorbdev.c	/^static int build_cvorbpath(char *path, size_t len)$/;"	f	file:	signature:(char *path, size_t len)
build_devpath	lib/cvorbdev.c	/^static int build_devpath(int lun, char *path, size_t len)$/;"	f	file:	signature:(int lun, char *path, size_t len)
cdev	driver/cvorb_priv.h	/^	struct cdev 		cdev;$/;"	m	struct:cvorb_dev	typeref:struct:cvorb_dev::cdev	access:public
chan_nr	driver/cvorb_priv.h	/^	uint32_t 	        chan_nr;$/;"	m	struct:cvorb_channel	access:public
channel_nr	lib/examples/status.c	/^static int	channel_nr = CHANNEL_NR;$/;"	v	file:
channel_state_machine	test/cvorbtest.h	/^static const char *channel_state_machine[] = {$/;"	v
channels	driver/cvorb_priv.h	/^	struct cvorb_channel 	channels[CVORB_CHANNELS];$/;"	m	struct:cvorb_submodule	typeref:struct:cvorb_submodule::cvorb_channel	access:public
channels_dir	driver/cvorb_priv.h	/^        struct kobject 		channels_dir;$/;"	m	struct:cvorb_channel	typeref:struct:cvorb_channel::kobject	access:public
channr	include/cvorb.h	/^        uint16_t channr;        \/** channel [0 - 7] *\/$/;"	m	struct:cvorb_hw_fcn	access:public
cmp_ints	lib/cvorbdev.c	/^static int cmp_ints(const void *a, const void *b)$/;"	f	file:	signature:(const void *a, const void *b)
commands_string	lib/examples/lock.c	/^static const char commands_string[] =$/;"	v	file:
commands_string	lib/examples/pcb.c	/^static const char commands_string[] =$/;"	v	file:
commands_string	lib/examples/status.c	/^static const char commands_string[] =$/;"	v	file:
commands_string	lib/examples/version.c	/^static const char commands_string[] =$/;"	v	file:
compute_hw_vector	lib/cvorb.c	/^static int compute_hw_vector(struct cvorb_vector_fcn *start_pt,  struct cvorb_vector_fcn *end_pt, uint16_t *ss, uint16_t *nos)$/;"	f	file:	signature:(struct cvorb_vector_fcn *start_pt, struct cvorb_vector_fcn *end_pt, uint16_t *ss, uint16_t *nos)
compute_vector_table	test/cvorbtest.c	/^static int compute_vector_table(char* fcn_name, int* vect_count) {$/;"	f	file:	signature:(char* fcn_name, int* vect_count)
current_ch	test/cvorbtest.c	/^static int current_ch = 1;$/;"	v	file:
current_dev	test/cvorbtest.c	/^static cvorb_t *current_dev=NULL;$/;"	v	file:
current_dev_index	test/cvorbtest.c	/^static int current_dev_index = 0;$/;"	v	file:
cvorb_attr_group	driver/cvorb_sysfs.c	/^static struct attribute_group cvorb_attr_group = {$/;"	v	typeref:struct:attribute_group	file:
cvorb_attr_scope	lib/cvorbdev.h	/^enum cvorb_attr_scope {$/;"	g
cvorb_attrs	driver/cvorb_sysfs.c	/^static struct attribute *cvorb_attrs[] = {$/;"	v	typeref:struct:attribute	file:
cvorb_ch_disable	include/libcvorb.h	/^int cvorb_ch_disable(cvorb_t *dev, unsigned int channelnr);$/;"	p	signature:(cvorb_t *dev, unsigned int channelnr)
cvorb_ch_disable	lib/cvorb.c	/^int cvorb_ch_disable(cvorb_t *dev, unsigned int chnr) {$/;"	f	signature:(cvorb_t *dev, unsigned int chnr)
cvorb_ch_disable_fcn	include/libcvorb.h	/^int cvorb_ch_disable_fcn( cvorb_t *dev, unsigned int channelnr, unsigned int functionnr);$/;"	p	signature:( cvorb_t *dev, unsigned int channelnr, unsigned int functionnr)
cvorb_ch_disable_fcn	lib/cvorb.c	/^int cvorb_ch_disable_fcn( cvorb_t *dev, unsigned int chnr, unsigned int fcnnr)$/;"	f	signature:( cvorb_t *dev, unsigned int chnr, unsigned int fcnnr)
cvorb_ch_enable	driver/cvorb_func.c	/^int cvorb_ch_enable(struct cvorb_channel *ch, uint32_t value)$/;"	f	signature:(struct cvorb_channel *ch, uint32_t value)
cvorb_ch_enable	driver/cvorb_priv.h	/^int cvorb_ch_enable(struct cvorb_channel *ch, uint32_t value);$/;"	p	signature:(struct cvorb_channel *ch, uint32_t value)
cvorb_ch_enable	include/libcvorb.h	/^int cvorb_ch_enable(cvorb_t *dev, unsigned int channelnr);$/;"	p	signature:(cvorb_t *dev, unsigned int channelnr)
cvorb_ch_enable	lib/cvorb.c	/^int cvorb_ch_enable(cvorb_t *dev, unsigned int chnr) {$/;"	f	signature:(cvorb_t *dev, unsigned int chnr)
cvorb_ch_enable_fcn	include/libcvorb.h	/^int cvorb_ch_enable_fcn( cvorb_t *dev, unsigned int channelnr, unsigned int functionnr);$/;"	p	signature:( cvorb_t *dev, unsigned int channelnr, unsigned int functionnr)
cvorb_ch_enable_fcn	lib/cvorb.c	/^int cvorb_ch_enable_fcn( cvorb_t *dev, unsigned int chnr, unsigned int fcnnr)$/;"	f	signature:( cvorb_t *dev, unsigned int chnr, unsigned int fcnnr)
cvorb_ch_get_enable_fcn_mask	include/libcvorb.h	/^int cvorb_ch_get_enable_fcn_mask( cvorb_t *dev, unsigned int channelnr, uint64_t *enbl_mask);$/;"	p	signature:( cvorb_t *dev, unsigned int channelnr, uint64_t *enbl_mask)
cvorb_ch_get_enable_fcn_mask	lib/cvorb.c	/^int cvorb_ch_get_enable_fcn_mask( cvorb_t *dev, unsigned int chnr, uint64_t *enbl_mask)$/;"	f	signature:( cvorb_t *dev, unsigned int chnr, uint64_t *enbl_mask)
cvorb_ch_get_fcn	include/libcvorb.h	/^int cvorb_ch_get_fcn( cvorb_t *dev, unsigned int channelnr, unsigned int functionnr, struct cvorb_vector_fcn *value, unsigned int max_size, unsigned int *size);$/;"	p	signature:( cvorb_t *dev, unsigned int channelnr, unsigned int functionnr, struct cvorb_vector_fcn *value, unsigned int max_size, unsigned int *size)
cvorb_ch_get_fcn	lib/cvorb.c	/^int cvorb_ch_get_fcn( cvorb_t *dev, unsigned int chnr, unsigned int fcnnr, struct cvorb_vector_fcn *buff, unsigned int n_vector, unsigned int *fcn_sz) {$/;"	f	signature:( cvorb_t *dev, unsigned int chnr, unsigned int fcnnr, struct cvorb_vector_fcn *buff, unsigned int n_vector, unsigned int *fcn_sz)
cvorb_ch_get_repeat_count	include/libcvorb.h	/^int cvorb_ch_get_repeat_count(cvorb_t *device, unsigned int channelnr, unsigned int *count);$/;"	p	signature:(cvorb_t *device, unsigned int channelnr, unsigned int *count)
cvorb_ch_get_repeat_count	lib/cvorb.c	/^int cvorb_ch_get_repeat_count(cvorb_t *dev, unsigned int chnr, unsigned int *count) {$/;"	f	signature:(cvorb_t *dev, unsigned int chnr, unsigned int *count)
cvorb_ch_get_status	include/libcvorb.h	/^int cvorb_ch_get_status(cvorb_t *device, unsigned int channelnr, unsigned int *status);$/;"	p	signature:(cvorb_t *device, unsigned int channelnr, unsigned int *status)
cvorb_ch_get_status	lib/cvorb.c	/^int cvorb_ch_get_status(cvorb_t *dev, unsigned int chnr, unsigned int *status) {$/;"	f	signature:(cvorb_t *dev, unsigned int chnr, unsigned int *status)
cvorb_ch_repeat_count	driver/cvorb_func.c	/^int cvorb_ch_repeat_count(struct cvorb_channel *ch, uint32_t value)$/;"	f	signature:(struct cvorb_channel *ch, uint32_t value)
cvorb_ch_repeat_count	driver/cvorb_priv.h	/^int cvorb_ch_repeat_count(struct cvorb_channel *ch, uint32_t value);$/;"	p	signature:(struct cvorb_channel *ch, uint32_t value)
cvorb_ch_select_fcn	include/libcvorb.h	/^int cvorb_ch_select_fcn( cvorb_t *dev, unsigned int channelnr, unsigned int functionnr);$/;"	p	signature:( cvorb_t *dev, unsigned int channelnr, unsigned int functionnr)
cvorb_ch_select_fcn	lib/cvorb.c	/^int cvorb_ch_select_fcn( cvorb_t *dev, unsigned int chnr, unsigned int fcnnr)$/;"	f	signature:( cvorb_t *dev, unsigned int chnr, unsigned int fcnnr)
cvorb_ch_set_fcn	include/libcvorb.h	/^int cvorb_ch_set_fcn( cvorb_t *dev, unsigned int channelnr, unsigned int functionnr, struct cvorb_vector_fcn *value, unsigned int size);$/;"	p	signature:( cvorb_t *dev, unsigned int channelnr, unsigned int functionnr, struct cvorb_vector_fcn *value, unsigned int size)
cvorb_ch_set_fcn	lib/cvorb.c	/^int cvorb_ch_set_fcn( cvorb_t *dev, unsigned int chnr, unsigned int fcnnr, struct cvorb_vector_fcn *value, unsigned int n_vector\/*, int ioctl_call*\/) {$/;"	f	signature:( cvorb_t *dev, unsigned int chnr, unsigned int fcnnr, struct cvorb_vector_fcn *value, unsigned int n_vector )
cvorb_ch_set_repeat_count	include/libcvorb.h	/^int cvorb_ch_set_repeat_count(cvorb_t *device, unsigned int channelnr, unsigned int count);$/;"	p	signature:(cvorb_t *device, unsigned int channelnr, unsigned int count)
cvorb_ch_set_repeat_count	lib/cvorb.c	/^int cvorb_ch_set_repeat_count(cvorb_t *dev, unsigned int chnr, unsigned int count) {$/;"	f	signature:(cvorb_t *dev, unsigned int chnr, unsigned int count)
cvorb_ch_status	driver/cvorb_func.c	/^int cvorb_ch_status(struct cvorb_channel *channel, uint32_t *status)$/;"	f	signature:(struct cvorb_channel *channel, uint32_t *status)
cvorb_ch_status	driver/cvorb_priv.h	/^int cvorb_ch_status(struct cvorb_channel *channel, uint32_t *status);$/;"	p	signature:(struct cvorb_channel *channel, uint32_t *status)
cvorb_channel	driver/cvorb_priv.h	/^struct cvorb_channel$/;"	s
cvorb_channel::chan_nr	driver/cvorb_priv.h	/^	uint32_t 	        chan_nr;$/;"	m	struct:cvorb_channel	access:public
cvorb_channel::channels_dir	driver/cvorb_priv.h	/^        struct kobject 		channels_dir;$/;"	m	struct:cvorb_channel	typeref:struct:cvorb_channel::kobject	access:public
cvorb_channel::enable	driver/cvorb_priv.h	/^        uint32_t                enable;$/;"	m	struct:cvorb_channel	access:public
cvorb_channel::enable_fcn_mask	driver/cvorb_priv.h	/^        uint64_t                enable_fcn_mask;$/;"	m	struct:cvorb_channel	access:public
cvorb_channel::parent	driver/cvorb_priv.h	/^	struct cvorb_submodule 	*parent;$/;"	m	struct:cvorb_channel	typeref:struct:cvorb_channel::cvorb_submodule	access:public
cvorb_channel::reg_offset	driver/cvorb_priv.h	/^        uint32_t                reg_offset;$/;"	m	struct:cvorb_channel	access:public
cvorb_channel::repeat_count	driver/cvorb_priv.h	/^        uint32_t                repeat_count;$/;"	m	struct:cvorb_channel	access:public
cvorb_channel::selected_fcn	driver/cvorb_priv.h	/^        uint32_t                selected_fcn;$/;"	m	struct:cvorb_channel	access:public
cvorb_channel_attribute	driver/cvorb_sysfs.c	/^struct cvorb_channel_attribute {$/;"	s	file:
cvorb_channel_attribute::attr	driver/cvorb_sysfs.c	/^        struct attribute attr;$/;"	m	struct:cvorb_channel_attribute	typeref:struct:cvorb_channel_attribute::attribute	file:	access:public
cvorb_channel_attribute::show	driver/cvorb_sysfs.c	/^        ssize_t(*show) (struct cvorb_channel *, char *);$/;"	m	struct:cvorb_channel_attribute	file:	access:public
cvorb_channel_attribute::store	driver/cvorb_sysfs.c	/^        ssize_t(*store) (struct cvorb_channel *, const char *, size_t);$/;"	m	struct:cvorb_channel_attribute	file:	access:public
cvorb_channel_fs_ops	driver/cvorb_sysfs.c	/^static struct sysfs_ops cvorb_channel_fs_ops = {$/;"	v	typeref:struct:sysfs_ops	file:
cvorb_channel_instance_release	driver/cvorb_sysfs.c	/^static void cvorb_channel_instance_release(struct kobject *kobj)$/;"	f	file:	signature:(struct kobject *kobj)
cvorb_channel_show	driver/cvorb_sysfs.c	/^static ssize_t cvorb_channel_show(struct kobject *channels_dir,$/;"	f	file:	signature:(struct kobject *channels_dir, struct attribute *attr, char *buffer)
cvorb_channel_store	driver/cvorb_sysfs.c	/^static ssize_t cvorb_channel_store(struct kobject *channels_dir, struct attribute *attr,$/;"	f	file:	signature:(struct kobject *channels_dir, struct attribute *attr, const char *buffer, size_t count)
cvorb_class	driver/cvorb_drvr.c	/^static struct class *cvorb_class = NULL;$/;"	v	typeref:struct:class	file:
cvorb_close	include/libcvorb.h	/^int cvorb_close(cvorb_t *device);$/;"	p	signature:(cvorb_t *device)
cvorb_close	lib/cvorb.c	/^int cvorb_close(cvorb_t *device)$/;"	f	signature:(cvorb_t *device)
cvorb_create_sysfs_files	driver/cvorb_priv.h	/^int cvorb_create_sysfs_files(struct cvorb_dev *cvorb);$/;"	p	signature:(struct cvorb_dev *cvorb)
cvorb_create_sysfs_files	driver/cvorb_sysfs.c	/^int cvorb_create_sysfs_files(struct cvorb_dev *card)$/;"	f	signature:(struct cvorb_dev *card)
cvorb_dev	driver/cvorb_priv.h	/^struct cvorb_dev$/;"	s
cvorb_dev::cdev	driver/cvorb_priv.h	/^	struct cdev 		cdev;$/;"	m	struct:cvorb_dev	typeref:struct:cvorb_dev::cdev	access:public
cvorb_dev::dev	driver/cvorb_priv.h	/^	struct device*          dev;$/;"	m	struct:cvorb_dev	typeref:struct:cvorb_dev::device	access:public
cvorb_dev::hw_rev	driver/cvorb_priv.h	/^	char 		        hw_rev[CVORB_VERSION_AS_STRING_SZ];$/;"	m	struct:cvorb_dev	access:public
cvorb_dev::iomap	driver/cvorb_priv.h	/^	void 			*iomap;$/;"	m	struct:cvorb_dev	access:public
cvorb_dev::lock	driver/cvorb_priv.h	/^	struct mutex 		lock;$/;"	m	struct:cvorb_dev	typeref:struct:cvorb_dev::mutex	access:public
cvorb_dev::lun	driver/cvorb_priv.h	/^	uint32_t 		lun;$/;"	m	struct:cvorb_dev	access:public
cvorb_dev::pcb_id	driver/cvorb_priv.h	/^	uint64_t 		pcb_id;$/;"	m	struct:cvorb_dev	access:public
cvorb_dev::submodules	driver/cvorb_priv.h	/^	struct cvorb_submodule	submodules[CVORB_SUBMODULES];$/;"	m	struct:cvorb_dev	typeref:struct:cvorb_dev::cvorb_submodule	access:public
cvorb_dev::vme_base	driver/cvorb_priv.h	/^	uint32_t                vme_base;$/;"	m	struct:cvorb_dev	access:public
cvorb_dev_add_attributes	driver/cvorb_sysfs.c	/^static int cvorb_dev_add_attributes(struct cvorb_dev *card)$/;"	f	file:	signature:(struct cvorb_dev *card)
cvorb_dev_del_attributes	driver/cvorb_sysfs.c	/^static void cvorb_dev_del_attributes(struct cvorb_dev *card)$/;"	f	file:	signature:(struct cvorb_dev *card)
cvorb_devno	driver/cvorb_drvr.c	/^static dev_t cvorb_devno;$/;"	v	file:
cvorb_disable_fcn	driver/cvorb_func.c	/^int cvorb_disable_fcn(struct cvorb_channel *ch, uint32_t value)$/;"	f	signature:(struct cvorb_channel *ch, uint32_t value)
cvorb_disable_fcn	driver/cvorb_priv.h	/^int cvorb_disable_fcn(struct cvorb_channel *ch, uint32_t value);$/;"	p	signature:(struct cvorb_channel *ch, uint32_t value)
cvorb_dma_read_mblt	driver/cvorb_dma.c	/^EXPORT_SYMBOL_GPL(cvorb_dma_read_mblt);$/;"	v
cvorb_dma_read_mblt	driver/cvorb_dma.c	/^int cvorb_dma_read_mblt(struct device *dev, unsigned int vme_addr, void __kernel *addr, ssize_t size)$/;"	f	signature:(struct device *dev, unsigned int vme_addr, void __kernel *addr, ssize_t size)
cvorb_dma_write_mblt	driver/cvorb_dma.c	/^EXPORT_SYMBOL_GPL(cvorb_dma_write_mblt);$/;"	v
cvorb_dma_write_mblt	driver/cvorb_dma.c	/^int cvorb_dma_write_mblt(struct device *dev, unsigned int vme_addr, void __kernel *addr, ssize_t size)$/;"	f	signature:(struct device *dev, unsigned int vme_addr, void __kernel *addr, ssize_t size)
cvorb_driver	driver/cvorb_drvr.c	/^static struct vme_driver cvorb_driver = {$/;"	v	typeref:struct:vme_driver	file:
cvorb_enable_fcn	driver/cvorb_func.c	/^int cvorb_enable_fcn(struct cvorb_channel *ch, uint32_t value)$/;"	f	signature:(struct cvorb_channel *ch, uint32_t value)
cvorb_enable_fcn	driver/cvorb_priv.h	/^int cvorb_enable_fcn(struct cvorb_channel *ch, uint32_t value);$/;"	p	signature:(struct cvorb_channel *ch, uint32_t value)
cvorb_errno	include/libcvorb.h	/^int cvorb_errno(void);$/;"	p	signature:(void)
cvorb_errno	lib/error.c	/^int cvorb_errno(void)$/;"	f	signature:(void)
cvorb_exit_module	driver/cvorb_drvr.c	/^module_exit(cvorb_exit_module);$/;"	v
cvorb_exit_module	driver/cvorb_drvr.c	/^static void __exit cvorb_exit_module(void)$/;"	f	file:	signature:(void)
cvorb_fops	driver/cvorb_func.c	/^static const struct file_operations cvorb_fops = {$/;"	v	typeref:struct:file_operations	file:
cvorb_get_ch_attribute_path	lib/cvorb.c	/^static int cvorb_get_ch_attribute_path(cvorb_t *dev, unsigned int chnr, char* attr_name, char* attr_path)$/;"	f	file:	signature:(cvorb_t *dev, unsigned int chnr, char* attr_name, char* attr_path)
cvorb_get_fcn_attribute_path	lib/cvorb.c	/^static int cvorb_get_fcn_attribute_path(cvorb_t *dev, unsigned int chnr, unsigned int fcnnr,$/;"	f	file:	signature:(cvorb_t *dev, unsigned int chnr, unsigned int fcnnr, char* attr_name, char* attr_path)
cvorb_get_hw_version	include/libcvorb.h	/^int cvorb_get_hw_version(cvorb_t *device, char *hw_version, unsigned int size);$/;"	p	signature:(cvorb_t *device, char *hw_version, unsigned int size)
cvorb_get_hw_version	lib/cvorb.c	/^int cvorb_get_hw_version(cvorb_t *device, char *hw_version, unsigned int size) {$/;"	f	signature:(cvorb_t *device, char *hw_version, unsigned int size)
cvorb_get_int	driver/cvorb_sysfs.c	/^static int cvorb_get_int(const char *buf, size_t count, int32_t *val)$/;"	f	file:	signature:(const char *buf, size_t count, int32_t *val)
cvorb_get_pcb_id	driver/cvorb_func.c	/^void cvorb_get_pcb_id(struct cvorb_dev *cvorb, uint64_t *value)$/;"	f	signature:(struct cvorb_dev *cvorb, uint64_t *value)
cvorb_get_pcb_id	driver/cvorb_priv.h	/^void cvorb_get_pcb_id(struct cvorb_dev *cvorb, uint64_t *value);$/;"	p	signature:(struct cvorb_dev *cvorb, uint64_t *value)
cvorb_get_pcb_id	include/libcvorb.h	/^int cvorb_get_pcb_id(cvorb_t *device, uint64_t *pcb_id);$/;"	p	signature:(cvorb_t *device, uint64_t *pcb_id)
cvorb_get_pcb_id	lib/cvorb.c	/^int cvorb_get_pcb_id(cvorb_t *device, uint64_t *pcb_id) {$/;"	f	signature:(cvorb_t *device, uint64_t *pcb_id)
cvorb_get_submodule_nr	include/libcvorb.h	/^int cvorb_get_submodule_nr(int channel_nr, int *submodule_nr);$/;"	p	signature:(int channel_nr, int *submodule_nr)
cvorb_get_submodule_nr	lib/cvorb.c	/^int cvorb_get_submodule_nr(int ch_nr, int *sm_nr)$/;"	f	signature:(int ch_nr, int *sm_nr)
cvorb_get_temperature	driver/cvorb_func.c	/^void cvorb_get_temperature(struct cvorb_dev *cvorb, int32_t *temp)$/;"	f	signature:(struct cvorb_dev *cvorb, int32_t *temp)
cvorb_get_temperature	driver/cvorb_priv.h	/^void cvorb_get_temperature(struct cvorb_dev *cvorb, int32_t *value);$/;"	p	signature:(struct cvorb_dev *cvorb, int32_t *value)
cvorb_get_temperature	include/libcvorb.h	/^int cvorb_get_temperature(cvorb_t *device, int *temp);$/;"	p	signature:(cvorb_t *device, int *temp)
cvorb_get_temperature	lib/cvorb.c	/^int cvorb_get_temperature(cvorb_t *device, int *temp) {$/;"	f	signature:(cvorb_t *device, int *temp)
cvorb_hw_fcn	include/cvorb.h	/^struct cvorb_hw_fcn {$/;"	s
cvorb_hw_fcn::channr	include/cvorb.h	/^        uint16_t channr;        \/** channel [0 - 7] *\/$/;"	m	struct:cvorb_hw_fcn	access:public
cvorb_hw_fcn::fcnnr	include/cvorb.h	/^        uint16_t fcnnr;         \/** function [0 - 63] *\/$/;"	m	struct:cvorb_hw_fcn	access:public
cvorb_hw_fcn::hw_fcn	include/cvorb.h	/^        uint32_t *hw_fcn;       \/** HW representation of the vector table given by the client *\/$/;"	m	struct:cvorb_hw_fcn	access:public
cvorb_hw_fcn::hw_fcn_size32	include/cvorb.h	/^        uint16_t hw_fcn_size32; \/** hw_fcn buffer size in 32 bits word *\/$/;"	m	struct:cvorb_hw_fcn	access:public
cvorb_hw_fcn::n_vector	include/cvorb.h	/^        uint16_t n_vector;      \/** number of vectors *\/$/;"	m	struct:cvorb_hw_fcn	access:public
cvorb_hw_fcn::submodulenr	include/cvorb.h	/^        uint16_t submodulenr;   \/** sub module [0, 1] *\/$/;"	m	struct:cvorb_hw_fcn	access:public
cvorb_init	driver/cvorb_func.c	/^static void cvorb_init(struct cvorb_dev *cvorb)$/;"	f	file:	signature:(struct cvorb_dev *cvorb)
cvorb_init_channel	driver/cvorb_func.c	/^static void cvorb_init_channel(struct cvorb_channel *ch)$/;"	f	file:	signature:(struct cvorb_channel *ch)
cvorb_init_module	driver/cvorb_drvr.c	/^module_init(cvorb_init_module);$/;"	v
cvorb_init_module	driver/cvorb_drvr.c	/^static int __init cvorb_init_module(void)$/;"	f	file:	signature:(void)
cvorb_init_submodule	driver/cvorb_func.c	/^static void cvorb_init_submodule(struct cvorb_submodule *sm)$/;"	f	file:	signature:(struct cvorb_submodule *sm)
cvorb_input_polarity	include/cvorb.h	/^enum cvorb_input_polarity {$/;"	g
cvorb_install	driver/cvorb_func.c	/^int cvorb_install(struct class *cvorb_class, struct device *parentDev, dev_t cvorb_devno, struct cvorb_dev *cvorb)$/;"	f	signature:(struct class *cvorb_class, struct device *parentDev, dev_t cvorb_devno, struct cvorb_dev *cvorb)
cvorb_install	driver/cvorb_priv.h	/^int cvorb_install(struct class *class, struct device *parentDev, dev_t cvorb_devno, struct cvorb_dev *cvorb);$/;"	p	signature:(struct class *class, struct device *parentDev, dev_t cvorb_devno, struct cvorb_dev *cvorb)
cvorb_installed	driver/cvorb_drvr.c	/^static unsigned int cvorb_installed = 0;$/;"	v	file:
cvorb_ioctl	driver/cvorb_func.c	/^static int cvorb_ioctl(struct inode *inode, struct file *fp, unsigned op, unsigned long arg)$/;"	f	file:	signature:(struct inode *inode, struct file *fp, unsigned op, unsigned long arg)
cvorb_ioctl_get_fcn	driver/cvorb_func.c	/^static int cvorb_ioctl_get_fcn(struct cvorb_dev *cvorb, void __user *arg)$/;"	f	file:	signature:(struct cvorb_dev *cvorb, void __user *arg)
cvorb_ioctl_set_fcn	driver/cvorb_func.c	/^static int cvorb_ioctl_set_fcn(struct cvorb_dev *cvorb, void __user *arg)$/;"	f	file:	signature:(struct cvorb_dev *cvorb, void __user *arg)
cvorb_loglevel	include/libcvorb.h	/^int cvorb_loglevel(int loglevel);$/;"	p	signature:(int loglevel)
cvorb_loglevel	lib/error.c	/^int cvorb_loglevel(int loglevel)$/;"	f	signature:(int loglevel)
cvorb_map	driver/cvorb_func.c	/^static unsigned long cvorb_map(unsigned long base_address)$/;"	f	file:	signature:(unsigned long base_address)
cvorb_match	driver/cvorb_drvr.c	/^static int __devinit cvorb_match(struct device *pdev, unsigned int ndev)$/;"	f	file:	signature:(struct device *pdev, unsigned int ndev)
cvorb_open	driver/cvorb_func.c	/^static int cvorb_open(struct inode *inode, struct file *file)$/;"	f	file:	signature:(struct inode *inode, struct file *file)
cvorb_open	include/libcvorb.h	/^cvorb_t *cvorb_open(unsigned int lun);$/;"	p	signature:(unsigned int lun)
cvorb_open	lib/cvorb.c	/^cvorb_t *cvorb_open(unsigned int lun)$/;"	f	signature:(unsigned int lun)
cvorb_perror	include/libcvorb.h	/^void cvorb_perror(const char *string);$/;"	p	signature:(const char *string)
cvorb_perror	lib/error.c	/^void cvorb_perror(const char *string)$/;"	f	signature:(const char *string)
cvorb_probe	driver/cvorb_drvr.c	/^static int __devinit cvorb_probe(struct device *pdev, unsigned int ndev)$/;"	f	file:	signature:(struct device *pdev, unsigned int ndev)
cvorb_readw	driver/cvorb_priv.h	/^static inline uint32_t cvorb_readw(struct cvorb_dev *cvorb, unsigned int offset)$/;"	f	signature:(struct cvorb_dev *cvorb, unsigned int offset)
cvorb_release	driver/cvorb_func.c	/^static int cvorb_release(struct inode *inode, struct file *file)$/;"	f	file:	signature:(struct inode *inode, struct file *file)
cvorb_remove	driver/cvorb_drvr.c	/^static int __devexit cvorb_remove(struct device *pdev, unsigned int ndev)$/;"	f	file:	signature:(struct device *pdev, unsigned int ndev)
cvorb_remove_sysfs_files	driver/cvorb_priv.h	/^void cvorb_remove_sysfs_files(struct cvorb_dev *cvorb);$/;"	p	signature:(struct cvorb_dev *cvorb)
cvorb_remove_sysfs_files	driver/cvorb_sysfs.c	/^void cvorb_remove_sysfs_files(struct cvorb_dev *card)$/;"	f	signature:(struct cvorb_dev *card)
cvorb_reset	driver/cvorb_func.c	/^void cvorb_reset(struct cvorb_dev *cvorb)$/;"	f	signature:(struct cvorb_dev *cvorb)
cvorb_reset	driver/cvorb_priv.h	/^enum cvorb_reset {$/;"	g
cvorb_reset	driver/cvorb_priv.h	/^void cvorb_reset(struct cvorb_dev *cvorb);$/;"	p	signature:(struct cvorb_dev *cvorb)
cvorb_select_fcn	driver/cvorb_func.c	/^int cvorb_select_fcn(struct cvorb_channel *ch, uint32_t value)$/;"	f	signature:(struct cvorb_channel *ch, uint32_t value)
cvorb_select_fcn	driver/cvorb_priv.h	/^int cvorb_select_fcn(struct cvorb_channel *ch, uint32_t value);$/;"	p	signature:(struct cvorb_channel *ch, uint32_t value)
cvorb_set_fcn_attr	driver/cvorb_sysfs.c	/^static struct bin_attribute cvorb_set_fcn_attr = {$/;"	v	typeref:struct:bin_attribute	file:
cvorb_show_description	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_description(struct device *pdev, struct device_attribute *attr, char *buf)$/;"	f	file:	signature:(struct device *pdev, struct device_attribute *attr, char *buf)
cvorb_show_enable	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_enable(struct cvorb_channel *ch, char *buf)$/;"	f	file:	signature:(struct cvorb_channel *ch, char *buf)
cvorb_show_enable_fcn_mask	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_enable_fcn_mask(struct cvorb_channel *ch, char *buf)$/;"	f	file:	signature:(struct cvorb_channel *ch, char *buf)
cvorb_show_hw_version	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_hw_version(struct device *pdev, struct device_attribute *attr, char *buf)$/;"	f	file:	signature:(struct device *pdev, struct device_attribute *attr, char *buf)
cvorb_show_input_polarity	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_input_polarity(struct cvorb_submodule *submodule, char *buf)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, char *buf)
cvorb_show_pcb_id	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_pcb_id(struct device *pdev, struct device_attribute *attr, char *buf)$/;"	f	file:	signature:(struct device *pdev, struct device_attribute *attr, char *buf)
cvorb_show_repeat_count	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_repeat_count(struct cvorb_channel *ch, char *buf)$/;"	f	file:	signature:(struct cvorb_channel *ch, char *buf)
cvorb_show_select_fcn	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_select_fcn(struct cvorb_channel *ch, char *buf)$/;"	f	file:	signature:(struct cvorb_channel *ch, char *buf)
cvorb_show_status	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_status(struct cvorb_channel *ch, char *buf)$/;"	f	file:	signature:(struct cvorb_channel *ch, char *buf)
cvorb_show_submodule_dac_source	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_submodule_dac_source(struct cvorb_submodule *submodule, char *buf)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, char *buf)
cvorb_show_submodule_enable_optical_output	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_submodule_enable_optical_output(struct cvorb_submodule *submodule, char *buf)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, char *buf)
cvorb_show_submodule_led_source	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_submodule_led_source(struct cvorb_submodule *submodule, char *buf)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, char *buf)
cvorb_show_submodule_optical_source	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_submodule_optical_source(struct cvorb_submodule *submodule, char *buf)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, char *buf)
cvorb_show_submodule_status	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_submodule_status(struct cvorb_submodule *submodule, char *buf)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, char *buf)
cvorb_show_temperature	driver/cvorb_sysfs.c	/^static ssize_t cvorb_show_temperature(struct device *pdev, struct device_attribute *attr, char *buf)$/;"	f	file:	signature:(struct device *pdev, struct device_attribute *attr, char *buf)
cvorb_sm_get_input_polarity	include/libcvorb.h	/^int cvorb_sm_get_input_polarity(cvorb_t *device, unsigned int submodule, enum cvorb_input_polarity *polarity);$/;"	p	signature:(cvorb_t *device, unsigned int submodule, enum cvorb_input_polarity *polarity)
cvorb_sm_get_input_polarity	lib/cvorb.c	/^int cvorb_sm_get_input_polarity(cvorb_t *device, unsigned int submodule, enum cvorb_input_polarity *polarity) {$/;"	f	signature:(cvorb_t *device, unsigned int submodule, enum cvorb_input_polarity *polarity)
cvorb_sm_get_status	include/libcvorb.h	/^int cvorb_sm_get_status(cvorb_t *device, unsigned int submodule, unsigned int *status);$/;"	p	signature:(cvorb_t *device, unsigned int submodule, unsigned int *status)
cvorb_sm_get_status	lib/cvorb.c	/^int cvorb_sm_get_status(cvorb_t *device, unsigned int submodule, unsigned int *status) {$/;"	f	signature:(cvorb_t *device, unsigned int submodule, unsigned int *status)
cvorb_sm_set_input_polarity	include/libcvorb.h	/^int cvorb_sm_set_input_polarity(cvorb_t *device, unsigned int submodule, enum cvorb_input_polarity polarity);$/;"	p	signature:(cvorb_t *device, unsigned int submodule, enum cvorb_input_polarity polarity)
cvorb_sm_set_input_polarity	lib/cvorb.c	/^int cvorb_sm_set_input_polarity(cvorb_t *device, unsigned int submodule, enum cvorb_input_polarity polarity) {$/;"	f	signature:(cvorb_t *device, unsigned int submodule, enum cvorb_input_polarity polarity)
cvorb_sm_set_trigger	include/libcvorb.h	/^int cvorb_sm_set_trigger(cvorb_t *device, unsigned int submodule, enum cvorb_trigger trigger);$/;"	p	signature:(cvorb_t *device, unsigned int submodule, enum cvorb_trigger trigger)
cvorb_sm_set_trigger	lib/cvorb.c	/^int cvorb_sm_set_trigger(cvorb_t *device, unsigned int submodule, enum cvorb_trigger trigger) {$/;"	f	signature:(cvorb_t *device, unsigned int submodule, enum cvorb_trigger trigger)
cvorb_store_disable_fcn	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_disable_fcn(struct cvorb_channel *ch, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_channel *ch, const char *buf, size_t count)
cvorb_store_enable	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_enable(struct cvorb_channel *ch, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_channel *ch, const char *buf, size_t count)
cvorb_store_enable_fcn	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_enable_fcn(struct cvorb_channel *ch, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_channel *ch, const char *buf, size_t count)
cvorb_store_fcn	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_fcn(struct kobject *channels_dir,$/;"	f	file:	signature:(struct kobject *channels_dir, struct bin_attribute *bin_attr, char *buffer, loff_t off, size_t count)
cvorb_store_input_polarity	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_input_polarity(struct cvorb_submodule *submodule, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, const char *buf, size_t count)
cvorb_store_repeat_count	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_repeat_count(struct cvorb_channel *ch, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_channel *ch, const char *buf, size_t count)
cvorb_store_reset	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_reset(struct device *pdev, struct device_attribute *attr, const char *buf, size_t count)$/;"	f	file:	signature:(struct device *pdev, struct device_attribute *attr, const char *buf, size_t count)
cvorb_store_select_fcn	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_select_fcn(struct cvorb_channel *ch, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_channel *ch, const char *buf, size_t count)
cvorb_store_submodule_dac_source	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_submodule_dac_source(struct cvorb_submodule *submodule, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, const char *buf, size_t count)
cvorb_store_submodule_enable_optical_output	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_submodule_enable_optical_output(struct cvorb_submodule *submodule, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, const char *buf, size_t count)
cvorb_store_submodule_event_start	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_submodule_event_start(struct cvorb_submodule *submodule, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, const char *buf, size_t count)
cvorb_store_submodule_event_stop	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_submodule_event_stop(struct cvorb_submodule *submodule, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, const char *buf, size_t count)
cvorb_store_submodule_led_source	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_submodule_led_source(struct cvorb_submodule *submodule, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, const char *buf, size_t count)
cvorb_store_submodule_optical_source	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_submodule_optical_source(struct cvorb_submodule *submodule, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, const char *buf, size_t count)
cvorb_store_submodule_reset	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_submodule_reset(struct cvorb_submodule *submodule, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, const char *buf, size_t count)
cvorb_store_submodule_start	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_submodule_start(struct cvorb_submodule *submodule, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, const char *buf, size_t count)
cvorb_store_submodule_stop	driver/cvorb_sysfs.c	/^static ssize_t cvorb_store_submodule_stop(struct cvorb_submodule *submodule, const char *buf, size_t count)$/;"	f	file:	signature:(struct cvorb_submodule *submodule, const char *buf, size_t count)
cvorb_strerror	include/libcvorb.h	/^char *cvorb_strerror(int errnum);$/;"	p	signature:(int errnum)
cvorb_strerror	lib/error.c	/^char *cvorb_strerror(int errnum)$/;"	f	signature:(int errnum)
cvorb_submodule	driver/cvorb_priv.h	/^struct cvorb_submodule$/;"	s
cvorb_submodule::channels	driver/cvorb_priv.h	/^	struct cvorb_channel 	channels[CVORB_CHANNELS];$/;"	m	struct:cvorb_submodule	typeref:struct:cvorb_submodule::cvorb_channel	access:public
cvorb_submodule::dac_source	driver/cvorb_priv.h	/^	uint32_t                dac_source;$/;"	m	struct:cvorb_submodule	access:public
cvorb_submodule::inpol	driver/cvorb_priv.h	/^	uint32_t 		inpol;$/;"	m	struct:cvorb_submodule	access:public
cvorb_submodule::led_source	driver/cvorb_priv.h	/^	uint32_t                led_source;$/;"	m	struct:cvorb_submodule	access:public
cvorb_submodule::optical_out_enabled	driver/cvorb_priv.h	/^	uint32_t                optical_out_enabled;$/;"	m	struct:cvorb_submodule	access:public
cvorb_submodule::optical_source	driver/cvorb_priv.h	/^	uint32_t                optical_source;$/;"	m	struct:cvorb_submodule	access:public
cvorb_submodule::parent	driver/cvorb_priv.h	/^	struct cvorb_dev 	*parent;$/;"	m	struct:cvorb_submodule	typeref:struct:cvorb_submodule::cvorb_dev	access:public
cvorb_submodule::reg_offset	driver/cvorb_priv.h	/^	uint32_t 		reg_offset;$/;"	m	struct:cvorb_submodule	access:public
cvorb_submodule::submod_nr	driver/cvorb_priv.h	/^	uint32_t                submod_nr;$/;"	m	struct:cvorb_submodule	access:public
cvorb_submodule::submodules_dir	driver/cvorb_priv.h	/^        struct kobject          submodules_dir;$/;"	m	struct:cvorb_submodule	typeref:struct:cvorb_submodule::kobject	access:public
cvorb_submodule_attribute	driver/cvorb_sysfs.c	/^struct cvorb_submodule_attribute {$/;"	s	file:
cvorb_submodule_attribute::attr	driver/cvorb_sysfs.c	/^        struct attribute attr;$/;"	m	struct:cvorb_submodule_attribute	typeref:struct:cvorb_submodule_attribute::attribute	file:	access:public
cvorb_submodule_attribute::show	driver/cvorb_sysfs.c	/^        ssize_t(*show) (struct cvorb_submodule *, char *);$/;"	m	struct:cvorb_submodule_attribute	file:	access:public
cvorb_submodule_attribute::store	driver/cvorb_sysfs.c	/^        ssize_t(*store) (struct cvorb_submodule *, const char *, size_t);$/;"	m	struct:cvorb_submodule_attribute	file:	access:public
cvorb_submodule_busy	driver/cvorb_func.c	/^static inline int cvorb_submodule_busy(struct cvorb_submodule *submodule)$/;"	f	file:	signature:(struct cvorb_submodule *submodule)
cvorb_submodule_dacsource	driver/cvorb_func.c	/^void cvorb_submodule_dacsource(struct cvorb_submodule *submodule, uint32_t value)$/;"	f	signature:(struct cvorb_submodule *submodule, uint32_t value)
cvorb_submodule_dacsource	driver/cvorb_priv.h	/^void cvorb_submodule_dacsource(struct cvorb_submodule *submodule, uint32_t value);$/;"	p	signature:(struct cvorb_submodule *submodule, uint32_t value)
cvorb_submodule_enable_opticalout	driver/cvorb_func.c	/^void cvorb_submodule_enable_opticalout(struct cvorb_submodule *submodule, uint32_t value)$/;"	f	signature:(struct cvorb_submodule *submodule, uint32_t value)
cvorb_submodule_enable_opticalout	driver/cvorb_priv.h	/^void cvorb_submodule_enable_opticalout(struct cvorb_submodule *submodule, uint32_t value);$/;"	p	signature:(struct cvorb_submodule *submodule, uint32_t value)
cvorb_submodule_fs_ops	driver/cvorb_sysfs.c	/^static struct sysfs_ops cvorb_submodule_fs_ops = {$/;"	v	typeref:struct:sysfs_ops	file:
cvorb_submodule_inpol	driver/cvorb_func.c	/^int cvorb_submodule_inpol(struct cvorb_submodule *submodule, uint32_t value)$/;"	f	signature:(struct cvorb_submodule *submodule, uint32_t value)
cvorb_submodule_inpol	driver/cvorb_priv.h	/^int cvorb_submodule_inpol(struct cvorb_submodule *submodule, uint32_t value);$/;"	p	signature:(struct cvorb_submodule *submodule, uint32_t value)
cvorb_submodule_instance_release	driver/cvorb_sysfs.c	/^static void cvorb_submodule_instance_release(struct kobject *kobj)$/;"	f	file:	signature:(struct kobject *kobj)
cvorb_submodule_ledsource	driver/cvorb_func.c	/^void cvorb_submodule_ledsource(struct cvorb_submodule *submodule, uint32_t value)$/;"	f	signature:(struct cvorb_submodule *submodule, uint32_t value)
cvorb_submodule_ledsource	driver/cvorb_priv.h	/^void cvorb_submodule_ledsource(struct cvorb_submodule *submodule, uint32_t value);$/;"	p	signature:(struct cvorb_submodule *submodule, uint32_t value)
cvorb_submodule_opticalsource	driver/cvorb_func.c	/^void cvorb_submodule_opticalsource(struct cvorb_submodule *submodule, uint32_t value)$/;"	f	signature:(struct cvorb_submodule *submodule, uint32_t value)
cvorb_submodule_opticalsource	driver/cvorb_priv.h	/^void cvorb_submodule_opticalsource(struct cvorb_submodule *submodule, uint32_t value);$/;"	p	signature:(struct cvorb_submodule *submodule, uint32_t value)
cvorb_submodule_reset	driver/cvorb_func.c	/^void cvorb_submodule_reset(struct cvorb_submodule *submodule)$/;"	f	signature:(struct cvorb_submodule *submodule)
cvorb_submodule_reset	driver/cvorb_priv.h	/^void cvorb_submodule_reset(struct cvorb_submodule *submodule);$/;"	p	signature:(struct cvorb_submodule *submodule)
cvorb_submodule_show	driver/cvorb_sysfs.c	/^static ssize_t cvorb_submodule_show(struct kobject *submodules_dir,$/;"	f	file:	signature:(struct kobject *submodules_dir, struct attribute *attr, char *buffer)
cvorb_submodule_status	driver/cvorb_func.c	/^void cvorb_submodule_status(struct cvorb_submodule *submodule, uint32_t *status)$/;"	f	signature:(struct cvorb_submodule *submodule, uint32_t *status)
cvorb_submodule_status	driver/cvorb_priv.h	/^void cvorb_submodule_status(struct cvorb_submodule *submodule, uint32_t *value);$/;"	p	signature:(struct cvorb_submodule *submodule, uint32_t *value)
cvorb_submodule_store	driver/cvorb_sysfs.c	/^static ssize_t cvorb_submodule_store(struct kobject *submodules_dir, struct attribute *attr,$/;"	f	file:	signature:(struct kobject *submodules_dir, struct attribute *attr, const char *buffer, size_t count)
cvorb_submodule_trigger	driver/cvorb_func.c	/^int cvorb_submodule_trigger(struct cvorb_submodule *submodule, enum cvorb_trigger event)$/;"	f	signature:(struct cvorb_submodule *submodule, enum cvorb_trigger event)
cvorb_submodule_trigger	driver/cvorb_priv.h	/^int cvorb_submodule_trigger(struct cvorb_submodule *submodule, enum cvorb_trigger event);$/;"	p	signature:(struct cvorb_submodule *submodule, enum cvorb_trigger event)
cvorb_sysfs_set_fcn	driver/cvorb_func.c	/^int cvorb_sysfs_set_fcn(struct cvorb_channel *channel, void *buffer)$/;"	f	signature:(struct cvorb_channel *channel, void *buffer)
cvorb_sysfs_set_fcn	driver/cvorb_priv.h	/^int cvorb_sysfs_set_fcn(struct cvorb_channel *channel, void *arg);$/;"	p	signature:(struct cvorb_channel *channel, void *arg)
cvorb_t	include/libcvorb.h	/^typedef struct __cvorb_t cvorb_t;$/;"	t	typeref:struct:__cvorb_t
cvorb_trigger	include/cvorb.h	/^enum cvorb_trigger {$/;"	g
cvorb_uninstall	driver/cvorb_func.c	/^void cvorb_uninstall(struct class *class, struct cvorb_dev *cvorb, dev_t cvorb_devno)$/;"	f	signature:(struct class *class, struct cvorb_dev *cvorb, dev_t cvorb_devno)
cvorb_uninstall	driver/cvorb_priv.h	/^void cvorb_uninstall(struct class* class, struct cvorb_dev *cvorb, dev_t cvorb_devno);$/;"	p	signature:(struct class* class, struct cvorb_dev *cvorb, dev_t cvorb_devno)
cvorb_vector_fcn	include/cvorb.h	/^struct cvorb_vector_fcn {$/;"	s
cvorb_vector_fcn::t	include/cvorb.h	/^        double t; \/**< values of time from function start in ms *\/$/;"	m	struct:cvorb_vector_fcn	access:public
cvorb_vector_fcn::v	include/cvorb.h	/^        unsigned short v; \/**< amplitudes in corresponding physical unit *\/$/;"	m	struct:cvorb_vector_fcn	access:public
cvorb_version_check	driver/cvorb_func.c	/^static int cvorb_version_check(struct cvorb_dev *cvorb)$/;"	f	file:	signature:(struct cvorb_dev *cvorb)
cvorb_writebitfields	driver/cvorb_priv.h	/^static inline void cvorb_writebitfields(struct cvorb_dev* cvorb, unsigned int offset,$/;"	f	signature:(struct cvorb_dev* cvorb, unsigned int offset, uint32_t mask, uint32_t value)
cvorb_writew	driver/cvorb_priv.h	/^static inline void cvorb_writew(struct cvorb_dev *cvorb, unsigned int offset, uint32_t value)$/;"	f	signature:(struct cvorb_dev *cvorb, unsigned int offset, uint32_t value)
cvorbdev_device_exists	lib/cvorbdev.c	/^int cvorbdev_device_exists(int index)$/;"	f	signature:(int index)
cvorbdev_device_exists	lib/cvorbdev.h	/^int cvorbdev_device_exists(int index);$/;"	p	signature:(int index)
cvorbdev_get_attr	lib/cvorbdev.c	/^static int cvorbdev_get_attr(const char *attr_path, void *value, size_t len)$/;"	f	file:	signature:(const char *attr_path, void *value, size_t len)
cvorbdev_get_attr_bin	lib/cvorbdev.c	/^int cvorbdev_get_attr_bin(const char *attr_path, void *value, size_t count)$/;"	f	signature:(const char *attr_path, void *value, size_t count)
cvorbdev_get_attr_bin	lib/cvorbdev.h	/^int cvorbdev_get_attr_bin(const char *attr_path, void *value, size_t count);$/;"	p	signature:(const char *attr_path, void *value, size_t count)
cvorbdev_get_attr_char	lib/cvorbdev.c	/^int cvorbdev_get_attr_char(const char *attr_path, char *valp, int size)$/;"	f	signature:(const char *attr_path, char *valp, int size)
cvorbdev_get_attr_char	lib/cvorbdev.h	/^int cvorbdev_get_attr_char(const char *attr_path, char *valp, int size);$/;"	p	signature:(const char *attr_path, char *valp, int size)
cvorbdev_get_attr_int32	lib/cvorbdev.c	/^int cvorbdev_get_attr_int32(const char *attr_path, int *valp)$/;"	f	signature:(const char *attr_path, int *valp)
cvorbdev_get_attr_int32	lib/cvorbdev.h	/^int cvorbdev_get_attr_int32(const char *attr_path, int32_t *valp);$/;"	p	signature:(const char *attr_path, int32_t *valp)
cvorbdev_get_attr_uint32	lib/cvorbdev.c	/^int cvorbdev_get_attr_uint32(const char *attr_path, uint32_t *valp)$/;"	f	signature:(const char *attr_path, uint32_t *valp)
cvorbdev_get_attr_uint32	lib/cvorbdev.h	/^int cvorbdev_get_attr_uint32(const char *attr_path, uint32_t *valp);$/;"	p	signature:(const char *attr_path, uint32_t *valp)
cvorbdev_get_attr_uint64	lib/cvorbdev.c	/^int cvorbdev_get_attr_uint64(const char *attr_path, uint64_t *valp)$/;"	f	signature:(const char *attr_path, uint64_t *valp)
cvorbdev_get_attr_uint64	lib/cvorbdev.h	/^int cvorbdev_get_attr_uint64(const char *attr_path, uint64_t *valp);$/;"	p	signature:(const char *attr_path, uint64_t *valp)
cvorbdev_get_device_list	lib/cvorbdev.c	/^int cvorbdev_get_device_list(int *indexes, int elems)$/;"	f	signature:(int *indexes, int elems)
cvorbdev_get_device_list	lib/cvorbdev.h	/^int cvorbdev_get_device_list(int *indexes, int elems);$/;"	p	signature:(int *indexes, int elems)
cvorbdev_get_devname	lib/cvorbdev.c	/^void cvorbdev_get_devname(int lun, char *str, size_t len)$/;"	f	signature:(int lun, char *str, size_t len)
cvorbdev_get_devname	lib/cvorbdev.h	/^void cvorbdev_get_devname(int index, char *str, size_t len);$/;"	p	signature:(int index, char *str, size_t len)
cvorbdev_get_nr_devices	lib/cvorbdev.c	/^int cvorbdev_get_nr_devices(void)$/;"	f	signature:(void)
cvorbdev_get_nr_devices	lib/cvorbdev.h	/^int cvorbdev_get_nr_devices(void);$/;"	p	signature:(void)
cvorbdev_get_sysfs_path	lib/cvorbdev.c	/^int cvorbdev_get_sysfs_path(int lun, char* path, int size)$/;"	f	signature:(int lun, char* path, int size)
cvorbdev_get_sysfs_path	lib/cvorbdev.h	/^int cvorbdev_get_sysfs_path(int lun, char* path, int size);$/;"	p	signature:(int lun, char* path, int size)
cvorbdev_set_attr	lib/cvorbdev.c	/^static int cvorbdev_set_attr(const char *attr_path, const void *value, size_t size)$/;"	f	file:	signature:(const char *attr_path, const void *value, size_t size)
cvorbdev_set_attr_bin	lib/cvorbdev.c	/^int cvorbdev_set_attr_bin(const char *attr_path, const void *value, size_t count)$/;"	f	signature:(const char *attr_path, const void *value, size_t count)
cvorbdev_set_attr_bin	lib/cvorbdev.h	/^int cvorbdev_set_attr_bin(const char *attr_path, const void *value, size_t count);$/;"	p	signature:(const char *attr_path, const void *value, size_t count)
cvorbdev_set_attr_int32	lib/cvorbdev.c	/^int cvorbdev_set_attr_int32(const char *attr_path, int32_t value)$/;"	f	signature:(const char *attr_path, int32_t value)
cvorbdev_set_attr_int32	lib/cvorbdev.h	/^int cvorbdev_set_attr_int32(const char *attr_path, int32_t value);$/;"	p	signature:(const char *attr_path, int32_t value)
cvorbdev_set_attr_uint32	lib/cvorbdev.c	/^int cvorbdev_set_attr_uint32(const char *attr_path, uint32_t value)$/;"	f	signature:(const char *attr_path, uint32_t value)
cvorbdev_set_attr_uint32	lib/cvorbdev.h	/^int cvorbdev_set_attr_uint32(const char *attr_path, uint32_t value);$/;"	p	signature:(const char *attr_path, uint32_t value)
dac_source	driver/cvorb_priv.h	/^	uint32_t                dac_source;$/;"	m	struct:cvorb_submodule	access:public
data	test/vtf/conv.c	/^} data[2048] = { { 0 } };$/;"	v	typeref:struct:__anon1
default_cvorb_channel_attr	driver/cvorb_sysfs.c	/^static struct cvorb_channel_attribute *default_cvorb_channel_attr[] = {$/;"	v	typeref:struct:cvorb_channel_attribute	file:
default_cvorb_submodule_attr	driver/cvorb_sysfs.c	/^static struct cvorb_submodule_attribute *default_cvorb_submodule_attr[] = {$/;"	v	typeref:struct:cvorb_submodule_attribute	file:
dev	driver/cvorb_priv.h	/^	struct device*          dev;$/;"	m	struct:cvorb_dev	typeref:struct:cvorb_dev::device	access:public
device	lib/examples/lock.c	/^static cvorb_t *device;$/;"	v	file:
device	lib/examples/pcb.c	/^static cvorb_t *device;$/;"	v	file:
device	lib/examples/version.c	/^static cvorb_t *device;$/;"	v	file:
enable	driver/cvorb_priv.h	/^        uint32_t                enable;$/;"	m	struct:cvorb_channel	access:public
enable_fcn_mask	driver/cvorb_priv.h	/^        uint64_t                enable_fcn_mask;$/;"	m	struct:cvorb_channel	access:public
fcnnr	include/cvorb.h	/^        uint16_t fcnnr;         \/** function [0 - 63] *\/$/;"	m	struct:cvorb_hw_fcn	access:public
fd	include/libcvorb.h	/^	int fd;$/;"	m	struct:__cvorb_t	access:public
file_count	test/cvorbtest.c	/^static int file_count = 0;$/;"	v	file:
fv	test/cvorbtest.c	/^static struct cvorb_vector_fcn fv[CVORB_MAX_VECTOR];$/;"	v	typeref:struct:cvorb_vector_fcn	file:
getCount	test/time_stamp_counter.c	/^static unsigned long long getCount(void)$/;"	f	file:	signature:(void)
get_endian	driver/cvorb_func.c	/^static int get_endian(void)$/;"	f	file:	signature:(void)
get_fcn_list	test/cvorbtest.c	/^static int get_fcn_list(int display) {$/;"	f	file:	signature:(int display)
get_hw_fcn_size32	lib/cvorb.c	/^static int get_hw_fcn_size32(unsigned int n_vector)$/;"	f	file:	signature:(unsigned int n_vector)
h_ch	test/cvorbtest.c	/^int h_ch(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_ch_disable	test/cvorbtest.c	/^int h_ch_disable(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_ch_enable	test/cvorbtest.c	/^int h_ch_enable(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_ch_next	test/cvorbtest.c	/^int h_ch_next(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_ch_repeat	test/cvorbtest.c	/^int h_ch_repeat(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_ch_src	test/cvorbtest.c	/^int h_ch_src(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_ch_status	test/cvorbtest.c	/^int h_ch_status(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_device	test/cvorbtest.c	/^int h_device(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_device_next	test/cvorbtest.c	/^int h_device_next(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_fcn_disable	test/cvorbtest.c	/^int h_fcn_disable(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_fcn_enable	test/cvorbtest.c	/^int h_fcn_enable(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_fcn_enable_mask	test/cvorbtest.c	/^int h_fcn_enable_mask(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_fcn_load	test/cvorbtest.c	/^int h_fcn_load(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_fcn_play	test/cvorbtest.c	/^int h_fcn_play(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_fcn_read	test/cvorbtest.c	/^int h_fcn_read(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_fcn_select	test/cvorbtest.c	/^int h_fcn_select(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_hw_version	test/cvorbtest.c	/^int h_hw_version(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_load_and_play	test/cvorbtest.c	/^int h_load_and_play(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_pcb	test/cvorbtest.c	/^int h_pcb(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_rst	test/cvorbtest.c	/^int h_rst(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_submodule_enopt	test/cvorbtest.c	/^int h_submodule_enopt(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_submodule_inpol	test/cvorbtest.c	/^int h_submodule_inpol(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_submodule_rst	test/cvorbtest.c	/^int h_submodule_rst(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_submodule_status	test/cvorbtest.c	/^int h_submodule_status(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_submodule_trigger	test/cvorbtest.c	/^int h_submodule_trigger(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
h_temp	test/cvorbtest.c	/^int h_temp(struct cmd_desc *cmdd, struct atom *atoms)$/;"	f	signature:(struct cmd_desc *cmdd, struct atom *atoms)
hw_fcn	include/cvorb.h	/^        uint32_t *hw_fcn;       \/** HW representation of the vector table given by the client *\/$/;"	m	struct:cvorb_hw_fcn	access:public
hw_fcn_size32	include/cvorb.h	/^        uint16_t hw_fcn_size32; \/** hw_fcn buffer size in 32 bits word *\/$/;"	m	struct:cvorb_hw_fcn	access:public
hw_rev	driver/cvorb_priv.h	/^	char 		        hw_rev[CVORB_VERSION_AS_STRING_SZ];$/;"	m	struct:cvorb_dev	access:public
hw_version	include/libcvorb.h	/^        char hw_version[CVORB_HW_VER_SIZE];$/;"	m	struct:__cvorb_t	access:public
indexes	test/cvorbtest.c	/^static int *indexes=NULL;$/;"	v	file:
inpol	driver/cvorb_priv.h	/^	uint32_t 		inpol;$/;"	m	struct:cvorb_submodule	access:public
iomap	driver/cvorb_priv.h	/^	void 			*iomap;$/;"	m	struct:cvorb_dev	access:public
ktype_cvorb_channel	driver/cvorb_sysfs.c	/^static struct kobj_type ktype_cvorb_channel = {$/;"	v	typeref:struct:kobj_type	file:
ktype_cvorb_submodule	driver/cvorb_sysfs.c	/^static struct kobj_type ktype_cvorb_submodule = {$/;"	v	typeref:struct:kobj_type	file:
led_source	driver/cvorb_priv.h	/^	uint32_t                led_source;$/;"	m	struct:cvorb_submodule	access:public
list_devices	lib/cvorbdev.c	/^static int list_devices(const char *path, int *indexes, int elems)$/;"	f	file:	signature:(const char *path, int *indexes, int elems)
lock	driver/cvorb_priv.h	/^	struct mutex 		lock;$/;"	m	struct:cvorb_dev	typeref:struct:cvorb_dev::mutex	access:public
lun	driver/cvorb_drvr.c	/^static int lun[CVORB_MAX_BOARDS] = { [0 ... CVORB_MAX_BOARDS-1] = -1 };$/;"	v	file:
lun	driver/cvorb_priv.h	/^	uint32_t 		lun;$/;"	m	struct:cvorb_dev	access:public
lun	include/libcvorb.h	/^        int lun;$/;"	m	struct:__cvorb_t	access:public
mHardware	test/time_stamp_counter.c	/^static int mHardware = 1;$/;"	v	file:
mPeriod	test/time_stamp_counter.c	/^static double mPeriod = 0;$/;"	v	file:
mValueCount	test/time_stamp_counter.c	/^static unsigned long long mValueCount = 0; \/\/duration from start$/;"	v	file:
main	lib/examples/lock.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	lib/examples/pcb.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	lib/examples/status.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	lib/examples/version.c	/^int main(int argc, char *argv[])$/;"	f	signature:(int argc, char *argv[])
main	test/cvorbtest.c	/^int main(int argc, char *argv[], char *envp[])$/;"	f	signature:(int argc, char *argv[], char *envp[])
main	test/vtf/conv.c	/^int main(int argc, char *argv[], char *envp[])$/;"	f	signature:(int argc, char *argv[], char *envp[])
module_nr	lib/examples/lock.c	/^static int	module_nr = MODULE_NR;$/;"	v	file:
module_nr	lib/examples/pcb.c	/^static int	module_nr = MODULE_NR;$/;"	v	file:
module_nr	lib/examples/status.c	/^static int	module_nr = MODULE_NR;$/;"	v	file:
module_nr	lib/examples/version.c	/^static int	module_nr = MODULE_NR;$/;"	v	file:
my_stringify	lib/examples/my_stringify.h	6;"	d
my_stringify_l	lib/examples/my_stringify.h	5;"	d
n_vector	include/cvorb.h	/^        uint16_t n_vector;      \/** number of vectors *\/$/;"	m	struct:cvorb_hw_fcn	access:public
ndevs	test/cvorbtest.c	/^static int ndevs;$/;"	v	file:
num_base_address	driver/cvorb_drvr.c	/^static unsigned int num_base_address=0;$/;"	v	file:
num_lun	driver/cvorb_drvr.c	/^static unsigned int num_lun=0;$/;"	v	file:
optical_out_enabled	driver/cvorb_priv.h	/^	uint32_t                optical_out_enabled;$/;"	m	struct:cvorb_submodule	access:public
optical_source	driver/cvorb_priv.h	/^	uint32_t                optical_source;$/;"	m	struct:cvorb_submodule	access:public
param	driver/cvorb_func.c	/^static struct pdparam_master param = {$/;"	v	typeref:struct:pdparam_master	file:
parent	driver/cvorb_priv.h	/^	struct cvorb_dev 	*parent;$/;"	m	struct:cvorb_submodule	typeref:struct:cvorb_submodule::cvorb_dev	access:public
parent	driver/cvorb_priv.h	/^	struct cvorb_submodule 	*parent;$/;"	m	struct:cvorb_channel	typeref:struct:cvorb_channel::cvorb_submodule	access:public
parse_args	lib/examples/lock.c	/^static void parse_args(int argc, char *argv[])$/;"	f	file:	signature:(int argc, char *argv[])
parse_args	lib/examples/pcb.c	/^static void parse_args(int argc, char *argv[])$/;"	f	file:	signature:(int argc, char *argv[])
parse_args	lib/examples/status.c	/^static void parse_args(int argc, char *argv[])$/;"	f	file:	signature:(int argc, char *argv[])
parse_args	lib/examples/version.c	/^static void parse_args(int argc, char *argv[])$/;"	f	file:	signature:(int argc, char *argv[])
path	test/cvorbtest.c	/^static char path[CVORB_PATH_SIZE] = "\\0";$/;"	v	file:
path_append	lib/cvorbdev.c	/^static void path_append(char *path, const char *append, size_t len)$/;"	f	file:	signature:(char *path, const char *append, size_t len)
pcb_id	driver/cvorb_priv.h	/^	uint64_t 		pcb_id;$/;"	m	struct:cvorb_dev	access:public
pcb_id	include/libcvorb.h	/^        uint64_t pcb_id;$/;"	m	struct:__cvorb_t	access:public
print_chanstat	lib/examples/status.c	/^static void print_chanstat(unsigned int chanstat)$/;"	f	file:	signature:(unsigned int chanstat)
reg_offset	driver/cvorb_priv.h	/^	uint32_t 		reg_offset;$/;"	m	struct:cvorb_submodule	access:public
reg_offset	driver/cvorb_priv.h	/^        uint32_t                reg_offset;$/;"	m	struct:cvorb_channel	access:public
remove_trailing_chars	lib/cvorbdev.c	/^static void remove_trailing_chars(char *path, char c)$/;"	f	file:	signature:(char *path, char c)
repeat_count	driver/cvorb_priv.h	/^        uint32_t                repeat_count;$/;"	m	struct:cvorb_channel	access:public
selected_fcn	driver/cvorb_priv.h	/^        uint32_t                selected_fcn;$/;"	m	struct:cvorb_channel	access:public
show	driver/cvorb_sysfs.c	/^        ssize_t(*show) (struct cvorb_channel *, char *);$/;"	m	struct:cvorb_channel_attribute	file:	access:public
show	driver/cvorb_sysfs.c	/^        ssize_t(*show) (struct cvorb_submodule *, char *);$/;"	m	struct:cvorb_submodule_attribute	file:	access:public
show_devices	test/cvorbtest.c	/^static void show_devices(void)$/;"	f	file:	signature:(void)
show_polarity	test/cvorbtest.c	/^static int show_polarity(int smnr)$/;"	f	file:	signature:(int smnr)
show_submodule_status	test/cvorbtest.c	/^static void show_submodule_status(unsigned int status)$/;"	f	file:	signature:(unsigned int status)
sighandler	lib/examples/lock.c	/^static void sighandler(int sig)$/;"	f	file:	signature:(int sig)
sighandler_register	lib/examples/lock.c	/^static void sighandler_register(void)$/;"	f	file:	signature:(void)
store	driver/cvorb_sysfs.c	/^        ssize_t(*store) (struct cvorb_channel *, const char *, size_t);$/;"	m	struct:cvorb_channel_attribute	file:	access:public
store	driver/cvorb_sysfs.c	/^        ssize_t(*store) (struct cvorb_submodule *, const char *, size_t);$/;"	m	struct:cvorb_submodule_attribute	file:	access:public
submod_nr	driver/cvorb_priv.h	/^	uint32_t                submod_nr;$/;"	m	struct:cvorb_submodule	access:public
submodulenr	include/cvorb.h	/^        uint16_t submodulenr;   \/** sub module [0, 1] *\/$/;"	m	struct:cvorb_hw_fcn	access:public
submodules	driver/cvorb_priv.h	/^	struct cvorb_submodule	submodules[CVORB_SUBMODULES];$/;"	m	struct:cvorb_dev	typeref:struct:cvorb_dev::cvorb_submodule	access:public
submodules_dir	driver/cvorb_priv.h	/^        struct kobject          submodules_dir;$/;"	m	struct:cvorb_submodule	typeref:struct:cvorb_submodule::kobject	access:public
sysfs_path	include/libcvorb.h	/^        char sysfs_path[CVORB_PATH_SIZE];$/;"	m	struct:__cvorb_t	access:public
t	include/cvorb.h	/^        double t; \/**< values of time from function start in ms *\/$/;"	m	struct:cvorb_vector_fcn	access:public
t	test/vtf/conv.c	/^	double t;$/;"	m	struct:__anon1	file:	access:public
to_cvorb_channel	driver/cvorb_sysfs.c	51;"	d	file:
to_cvorb_channel_attr	driver/cvorb_sysfs.c	52;"	d	file:
to_cvorb_submodule	driver/cvorb_sysfs.c	249;"	d	file:
to_cvorb_submodule_attr	driver/cvorb_sysfs.c	250;"	d	file:
ts_calibrateCountPeriod	test/time_stamp_counter.c	/^void ts_calibrateCountPeriod(unsigned int inDelay\/*ms*\/, unsigned int inTimes)$/;"	f	signature:(unsigned int inDelay , unsigned int inTimes)
ts_calibrateCountPeriod	test/time_stamp_counter.h	/^void ts_calibrateCountPeriod(unsigned int inDelay\/*ms*\/, unsigned int inTimes);$/;"	p	signature:(unsigned int inDelay , unsigned int inTimes)
ts_getValue	test/time_stamp_counter.c	/^double ts_getValue(double unit)$/;"	f	signature:(double unit)
ts_getValue	test/time_stamp_counter.h	/^double ts_getValue(double unit);$/;"	p	signature:(double unit)
usage_complete	lib/examples/lock.c	/^static void usage_complete(void)$/;"	f	file:	signature:(void)
usage_complete	lib/examples/pcb.c	/^static void usage_complete(void)$/;"	f	file:	signature:(void)
usage_complete	lib/examples/status.c	/^static void usage_complete(void)$/;"	f	file:	signature:(void)
usage_complete	lib/examples/version.c	/^static void usage_complete(void)$/;"	f	file:	signature:(void)
usage_string	lib/examples/lock.c	/^static const char usage_string[] =$/;"	v	file:
usage_string	lib/examples/pcb.c	/^static const char usage_string[] =$/;"	v	file:
usage_string	lib/examples/status.c	/^static const char usage_string[] =$/;"	v	file:
usage_string	lib/examples/version.c	/^static const char usage_string[] =$/;"	v	file:
use_builtin_cmds	test/cvorbtest.c	/^int use_builtin_cmds = 0;$/;"	v
user_cmds	test/cvorbtest.c	/^struct cmd_desc user_cmds[] = {$/;"	v	typeref:struct:cmd_desc
v	include/cvorb.h	/^        unsigned short v; \/**< amplitudes in corresponding physical unit *\/$/;"	m	struct:cvorb_vector_fcn	access:public
v	test/vtf/conv.c	/^	ushort v;$/;"	m	struct:__anon1	file:	access:public
vme_base	driver/cvorb_priv.h	/^	uint32_t                vme_base;$/;"	m	struct:cvorb_dev	access:public
vtf	test/cvorbtest.c	/^static char vtf[MAX_VTF_FILES][MAX_STR_SZ] = { { 0 } }; \/* search results *\/$/;"	v	file:
write_file	test/cvorbtest.c	/^static int write_file(const char *filename, struct cvorb_vector_fcn *fv, unsigned int n_vector)$/;"	f	file:	signature:(const char *filename, struct cvorb_vector_fcn *fv, unsigned int n_vector)
xmlfile	test/cvorbtest.c	/^char xmlfile[128] = "cvorb.xml";$/;"	v
