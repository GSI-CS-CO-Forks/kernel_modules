<install host [comment]>
	<driver	name [install_debug_level] [emulation_flag] [drivergen] [comment]>
		[<module name bus_type logical_module_number [extra] [ignore_install_errors] [comment]>
			[<vme [comment]/>]
			[<pci bus_number slot_number vendor_id device_id [subvendor_id subdevice_id] [comment]/>]
			[<carrier driver_name motherboard_number slot_number [comment]/>]
			[<interrupt [vector level] [comment]/>]
			[<pci_space bar endian [comment]/>]
			[<vme_space modifier data_width window_size address [free_flag] [comment]/>]
			[<carrier_space data_width window_size [comment]/>]
		</module>]
	</driver>
</install>

Syntax and semantic restrictions
---------------------------------

Everything that is in between [ ] - is OPTIONAL
So you can omit:
   <module>
   <vme>
   <pci>
   <carrier>
   <interrupt>
   <pci_space>
   <vme_space>
   <carrier_space>


Module description ([module] tag) can't have more then one module address
(one of [vme] [pci] or [carrier] tags)

host:		string[32]	// host name where driver is being installed
name:		string[32]	// The driver && module name
comment:	string[128]	// A comment describing the driver

// The debug printing level during the installation of the driver
// any combination of these flags
install_debug_level:	ASSERTION 	// Assertion violations
			TRACE	 	// All driver calls are traced
			WARNING  	// All warnings
			MODULE  	// Module errors
			VERBOSE  	// Lots of information printed
			NONE		// Mininimum printing

// If this driver was generated using driverGen?
// If not provided -- libinst will set it to [n] (i.e. no)
drivergen: y/n

// For testing the real hardware may be ansent
// any one of these can be chosen
emulation_flag:		HARDWARE_PRESENT	// Default value hardware installed
			EMULATE_HARDWARE	// Emulate the hardware

// This number is used in application programs to address a module
// each module has a corresponding hardware address
logical_module_number:	1..N	// The Logical Unit Number

// Sometimes we need to pass some extra stuff to the installation that is
// module specific
extra:	string[256]	// Extra data needed by the driver installation

// The bus type, note that CARRIER is logically a bus that can provide
// an address map for the modules installed on it.
bus_type:	PCI  	// The module is a PCI card
		PMC  	// The module is a PMC mezzanine
		VME  	// The module is a VME board
		CARRIER	// The module is on a piggy back card

// This is a VME module hardware address.
// As the base address is completely described in the address space
// this clause is empty. However it must be present to hang the
// address spaces on.
vme     // This says we expect some vme address spaces

// These next fields form a PCI hardware address
// N.B. Geographic addresses relate to this in a manufacturer dependent way
// This clause must be present to hang PCI address spaces from
pci bus_number:		int	// The PCI bus number [1 - 16] or 0xff (special case)
pci slot_number:	int	// The device number on the bus [1 - 16] or 0xff (special case)
pci vendor_id:		int	// The vendor ID
pci device_id:		int	// The device ID
pci subvendor_id:	int	// The interface chip vendor
pci subdevice_id:	int	// The interface chip ID

// When the module is on a carrier board we need to say
// which one and where on it. The driver then requests services from the
// carrier driver to map memory and forward interrupts. The carrier driver
// itself if just a normal VME or PCI driver that provides these services.
// This clause must be present to hang CAR address spaces from
carrier name:		string[32]	// Driver name of carrier we are on
carrier board_number:	int 1..N	// Which carrier board we are on
carrier board_position:	int 1..N	// The position on that board

// Some drivers have no interrupt handlers in which case the clause
// should be completely omitted.
// In PCI, PMC and CARRIER boards the interrupt level and vector
// are pre determined and can be omitted.
interrupt vector:	int 0..255
interrupt level:	int 1..8

// A PCI/PMC module may implement multiple address spaces, in the case of
// PCI/PMC the configuration space is predetermined and only the endianness
// of each space needs to be defined
pci_space bar:		int 0..5	// The PCI base address register
pci_space endian:	BIG  		// The address space is big endian
			LITTLE		// The address space is little endian

// A VME module defines address spaces which are implemented by the VME
// controller chip. This chip has limitted resources and can define only
// eight spaces at a time. In some cases where the address modifier has the
// value 0x2F the space is used for configuration in a similar way that bar0
// is used in PCI. In this case once the module is configured the address
// space can be returned to liberate the resource.
vme_space modifier:	int		// VME address modifier 2F, A16, A24, A32
vme_space data_width:	16 		// Data widthis short
			32		// Data width is 32 bit
vme_space address:	int		// VME base address
vme_space free_flag:	NO		// Do not return the space after install
			YES		// Return space after install
vme_space window_size:	0..0x1000000000	// The amount of memory to be mapped

bus_type must remain the same throughout the module definition.
Only one bus_type can be defined at a time.
[] means optional.

The [pci] tag implements a PCI hardware address
The [carrier] tag implements a carrier bus hardware address
For VME the hardware addresses are implemented within the vme_space tag

For each space the driver will map memory
The interrupt tag if present implies an ISR will be implemented
The interrupt level and vector may not be required for PCI and CARRIER buses

If any of the mappings or the registration of the ISR fails for a given module,
the installation of that module is cancelled. For testing purposes, the tag
ignore_install_errors can be provided, which allows the user to install
a module even if the mappings and/or the ISR registration failed.
mappings fail for whatever reason.
