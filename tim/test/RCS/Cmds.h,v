head	1.25;
access;
symbols;
locks; strict;
comment	@ * @;


1.25
date	2008.11.12.13.51.59;	author lewis;	state Exp;
branches;
next	1.24;

1.24
date	2008.03.31.09.32.48;	author lewis;	state Exp;
branches;
next	1.23;

1.23
date	2008.03.27.16.44.46;	author lewis;	state Exp;
branches;
next	1.22;

1.22
date	2008.01.11.15.15.59;	author lewis;	state Exp;
branches;
next	1.21;

1.21
date	2007.11.30.14.24.40;	author lewis;	state Exp;
branches;
next	1.20;

1.20
date	2007.02.13.09.39.19;	author lewis;	state Exp;
branches;
next	1.19;

1.19
date	2006.08.01.10.24.43;	author lewis;	state Exp;
branches;
next	1.18;

1.18
date	2006.03.01.14.11.43;	author lewis;	state Exp;
branches;
next	1.17;

1.17
date	2006.02.20.16.43.22;	author lewis;	state Exp;
branches;
next	1.16;

1.16
date	2006.02.16.09.22.00;	author lewis;	state Exp;
branches;
next	1.15;

1.15
date	2005.12.16.10.37.23;	author lewis;	state Exp;
branches;
next	1.14;

1.14
date	2005.10.21.16.01.06;	author lewis;	state Exp;
branches;
next	1.13;

1.13
date	2005.08.24.16.28.02;	author lewis;	state Exp;
branches;
next	1.12;

1.12
date	2005.08.24.15.36.34;	author lewis;	state Exp;
branches;
next	1.11;

1.11
date	2005.08.18.15.28.46;	author lewis;	state Exp;
branches;
next	1.10;

1.10
date	2005.08.09.12.58.08;	author lewis;	state Exp;
branches;
next	1.9;

1.9
date	2005.06.21.09.58.07;	author lewis;	state Exp;
branches;
next	1.8;

1.8
date	2005.05.13.09.40.21;	author lewis;	state Exp;
branches;
next	1.7;

1.7
date	2005.05.12.08.34.10;	author lewis;	state Exp;
branches;
next	1.6;

1.6
date	2005.05.04.08.51.22;	author lewis;	state Exp;
branches;
next	1.5;

1.5
date	2005.05.03.15.26.27;	author lewis;	state Exp;
branches;
next	1.4;

1.4
date	2005.05.02.09.31.50;	author lewis;	state Exp;
branches;
next	1.3;

1.3
date	2005.04.26.16.56.51;	author lewis;	state Exp;
branches;
next	1.2;

1.2
date	2005.04.25.09.37.40;	author lewis;	state Exp;
branches;
next	1.1;

1.1
date	2005.04.25.09.04.58;	author lewis;	state Exp;
branches;
next	;


desc
@@


1.25
log
@Added CC Connect to C event
@
text
@/**************************************************************************/
/* Command line stuff                                                     */
/**************************************************************************/

int Illegal();              /* llegal command */

int Quit();                 /* Quit test program  */
int Help();                 /* Help on commands   */
int News();                 /* Show GMT test news */
int History();              /* History            */
int Shell();                /* Shell command      */
int Sleep();                /* Sleep seconds      */
int Pause();                /* Pause keyboard     */
int Atoms();                /* Atom list commands */

int ChangeEditor();
int ChangeDirectory();
int GetVersion();

int WaitInterrupt();
int GetSetQue();
int GetSetTmo();
int GetSetPtim();
int SimulateInterrupt();
int GetSetRemote();
int GetUtc();
int WaitTelegram();
int GetTelegram();
int LineNames();
int GetSetModule();
int GetStatus();
int GetSetPll();
int NextModule();
int GetSetCtim();
int SwDeb();
int CtimRead();
int DoIo();
int SetRemoteCmd();
int GetSetCounter();
int NextCounter();
int Video();
int Config();
int LaunchHwTest();
int LaunchLookat();
int LaunchClock();
int ParseCycleString();
int ShowUserMat();
int ConnectCTime();

/* Commands */

typedef enum {

   CmdNOCM,  /* llegal command */

   CmdQUIT,  /* Quit test program  */
   CmdHELP,  /* Help on commands   */
   CmdNEWS,  /* Show GMT test news */
   CmdHIST,  /* History            */
   CmdSHELL, /* Shell command      */
   CmdSLEEP, /* Sleep seconds      */
   CmdPAUSE, /* Pause keyboard     */
   CmdATOMS, /* Atom list commands */

   CmdCE,    /* Change text editor   */
   CmdCD,    /* Change configuration */
   CmdVER,   /* Get version */
   CmdCST,   /* Convert cycle string */

   CmdWI,    /* Wait for an interrupt */
   CmdCC,    /* Connect to a C time */
   CmdQF,    /* Get set the queue flag */
   CmdTMO,   /* Get set timeout */
   CmdPTM,   /* Edit PTIM equipments */
   CmdSI,    /* Simulate an interrupt */
   CmdDOIO,  /* Use CTR as an IO register */
   CmdREM,   /* Remote control a counter */
   CmdRCM,   /* Send a remote command */
   CmdCNF,   /* Edit counter configuration */
   CmdUTC,   /* Get UTC time */
   CmdWTGM,  /* Wait telegram */
   CmdGTGM,  /* Get telegram */
   CmdLNAM,  /* Line names */
   CmdUMAT,  /* User Matrix */
   CmdMOD,   /* Show modules */
   CmdNM,    /* Next module */
   CmdCNT,   /* Get or set current counter */
   CmdNC,    /* Next counter */
   CmdRST,   /* Read status */
   CmdPLL,   /* Get set PLL locking method */
   CmdCTM,   /* Edit CTIM objects */
   CmdDEB,   /* Get set debug level */
   CmdCLD,   /* Load CTIM definitions */
   CmdVID,   /* Launch Tgm Video */
   CmdHWT,   /* Launch hardware test program */
   CmdLKM,   /* Launch lookat a timing */
   CmdCLK,   /* Launch clock */

   CmdCMDS } CmdId;

typedef struct {
   CmdId  Id;
   char  *Name;
   char  *Help;
   char  *Optns;
   int  (*Proc)(); } Cmd;

static Cmd cmds[CmdCMDS] = {

   { CmdNOCM,   "???",    "Illegal command"          ,""                   ,Illegal },

   { CmdQUIT,    "q" ,    "Quit test program"        ,""                   ,Quit    },
   { CmdHELP,    "h" ,    "Help on commands"         ,""                   ,Help    },
   { CmdNEWS,    "news",  "Show GMT test news"       ,""                   ,News    },
   { CmdHIST,    "his",   "History"                  ,""                   ,History },
   { CmdSHELL,   "sh",    "Shell command"            ,"UnixCmd"            ,Shell   },
   { CmdSLEEP,   "s" ,    "Sleep seconds"            ,"Seconds"            ,Sleep   },
   { CmdPAUSE,   "z" ,    "Pause keyboard"           ,""                   ,Pause   },
   { CmdATOMS,   "a" ,    "Atom list commands"       ,""                   ,Atoms   },

   { CmdCE,      "ce",    "Change text editor"       ,""                   ,ChangeEditor      },
   { CmdCD,      "cd",    "Change configuration"     ,"Path"               ,ChangeDirectory   },
   { CmdVER,     "ver",   "Get TimLib version"       ,""                   ,GetVersion        },
   { CmdCST,     "cstr",  "Convert cycle string"     ,"mch.grp.val"        ,ParseCycleString  },

   { CmdWI,      "wi",    "Wait for an interrupt"    ,"?|P<n>|C[M]<n>|Msk<t>" ,WaitInterrupt  },
   { CmdCC,      "cc",    "Connect to a C-event time","payload"            ,ConnectCTime      },
   { CmdQF,      "qf",    "Get set the queue flag"   ,"1/0"                ,GetSetQue         },
   { CmdTMO,     "tmo",   "Get set timeout"          ,"Timeout"            ,GetSetTmo         },
   { CmdPTM,     "ptm",   "Edit PTIM equipments"     ,"?|PtimId"           ,GetSetPtim        },
   { CmdSI,      "si",    "Simulate an interrupt"    ,"?|T<n>P<n>|C<n>[pld]|Msk",SimulateInterrupt },
   { CmdDOIO,    "io",    "Use CTR as an IO reg"     ,"Lemos,Mask"         ,DoIo              },
   { CmdREM,     "rem",   "Remote control a counter" ,"?|[<Flg>]"          ,GetSetRemote      },
   { CmdRCM,     "rcm",   "Send a remote command"    ,"?|<Cmd>"            ,SetRemoteCmd      },
   { CmdCNF,     "cnf",   "Configure remote counter" ,""                   ,Config            },
   { CmdUTC,     "utc",   "Get UTC (Real/Adjusted)"  ,"R|A"                ,GetUtc            },
   { CmdWTGM,    "wtgm",  "Wait telegram"            ,"?|[<Mch>|<n>]"      ,WaitTelegram      },
   { CmdGTGM,    "gtgm",  "Get telegram"             ,"?|[<Mch>|<n>]"      ,GetTelegram       },
   { CmdLNAM,    "stgm",  "Show telegram layout"     ,"?|[<Mch>|<n>]"      ,LineNames         },
   { CmdUMAT,    "umat",  "Show User Matrix"         ,"?|[<Mch>|<n>]"      ,ShowUserMat       },
   { CmdMOD,     "mo",    "Get set module"           ,"[<Module>]"         ,GetSetModule      },
   { CmdNM,      "nm",    "Next Module"              ,""                   ,NextModule        },
   { CmdCNT,     "cnt",   "Get set Counter"          ,"[<Counter>]"        ,GetSetCounter     },
   { CmdNC,      "nc",    "Next Counter"             ,""                   ,NextCounter       },
   { CmdRST,     "rst",   "Read module Status"       ,""                   ,GetStatus         },
   { CmdPLL,     "upll",  "UTC PLL lock Brutal/Slow" ,"?|0|1"              ,GetSetPll         },

   { CmdCTM,     "ctm",   "Edit CTIM objects"        ,"?|CtimId"           ,GetSetCtim           },
   { CmdDEB,     "deb",   "Get set debug level"      ,"Level"              ,SwDeb             },
   { CmdCLD,     "ctmr",  "Load CTIM definitions"    ,""                   ,CtimRead          },
   { CmdVID,     "vid",   "Launch telegram video"    ,"?|Machine"          ,Video             },
   { CmdHWT,     "hwt",   "Launch hw-test program"   ,""                   ,LaunchHwTest      },
   { CmdLKM,     "lkm",   "Launch look at timing"    ,"P|C|H <eqp>"        ,LaunchLookat      },
   { CmdCLK,     "clk",   "Launch timing clock"      ,"[<Module>]"         ,LaunchClock       } };

typedef enum {

   OprNOOP,

   OprNE,  OprEQ,  OprGT,  OprGE,  OprLT , OprLE,   OprAS,
   OprPL,  OprMI,  OprTI,  OprDI,  OprAND, OprOR,   OprXOR,
   OprNOT, OprNEG, OprLSH, OprRSH, OprINC, OprDECR, OprPOP,
   OprSTM,

   OprOPRS } OprId;

typedef struct {
   OprId  Id;
   char  *Name;
   char  *Help; } Opr;

static Opr oprs[OprOPRS] = {
   { OprNOOP, "?"  ,"???     Not an operator"       },
   { OprNE,   "#"  ,"Test:   Not equal"             },
   { OprEQ,   "="  ,"Test:   Equal"                 },
   { OprGT,   ">"  ,"Test:   Greater than"          },
   { OprGE,   ">=" ,"Test:   Greater than or equal" },
   { OprLT,   "<"  ,"Test:   Less than"             },
   { OprLE,   "<=" ,"Test:   Less than or equal"    },
   { OprAS,   ":=" ,"Assign: Becomes equal"         },
   { OprPL,   "+"  ,"Arith:  Add"                   },
   { OprMI,   "-"  ,"Arith:  Subtract"              },
   { OprTI,   "*"  ,"Arith:  Multiply"              },
   { OprDI,   "/"  ,"Arith:  Divide"                },
   { OprAND,  "&"  ,"Bits:   AND"                   },
   { OprOR,   "!"  ,"Bits:   OR"                    },
   { OprXOR,  "!!" ,"Bits:   XOR"                   },
   { OprNOT,  "##" ,"Bits:   Ones Compliment"       },
   { OprNEG,  "#-" ,"Arith:  Twos compliment"       },
   { OprLSH,  "<<" ,"Bits:   Left shift"            },
   { OprRSH,  ">>" ,"Bits:   Right shift"           },
   { OprINC,  "++" ,"Arith:  Increment"             },
   { OprDECR, "--" ,"Arith:  Decrement"             },
   { OprPOP,  ";"  ,"Stack:  POP"                   },
   { OprSTM,  "->" ,"Stack:  PUSH"                  } };

static char atomhash[256] = {
  10,9,9,9,9,9,9,9,9,0,0,9,9,0,9 ,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  0 ,1,9,1,9,4,1,9,2,3,1,1,0,1,11,1,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,1,
  10,6,6,6,6,6,6,6,6,6,6,6,6,6,6 ,6,6,6,6,6,6,6,6,6,6,6,6,7,9,8,9,6,
  9 ,6,6,6,6,6,6,6,6,6,6,6,6,6,6 ,6,6,6,6,6,6,6,6,6,6,6,6,9,9,9,9,9,
  9 ,9,9,9,9,9,9,9,9,9,9,9,9,9,9 ,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9 ,9,9,9,9,9,9,9,9,9,9,9,9,9,9 ,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9 ,9,9,9,9,9,9,9,9,9,9,9,9,9,9 ,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,
  9 ,9,9,9,9,9,9,9,9,9,9,9,9,9,9 ,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9 };

typedef enum {
   Seperator=0,Operator=1,Open=2,Close=3,Comment=4,Numeric=5,Alpha=6,
   Open_index=7,Close_index=8,Illegal_char=9,Terminator=10,Bit=11,
 } AtomType;

#define MAX_ARG_LENGTH  32
#define MAX_ARG_COUNT   16
#define MAX_ARG_HISTORY 16

typedef struct {
   int      Pos;
   int      Number;
   AtomType Type;
   char     Text[MAX_ARG_LENGTH];
   CmdId    CId;
   OprId    OId;
} ArgVal;

static int pcnt = 0;
static ArgVal val_bufs[MAX_ARG_HISTORY][MAX_ARG_COUNT];
static ArgVal *vals = val_bufs[0];

#ifndef True
#define True 1
#define False 0
#endif
@


1.24
log
@*** empty log message ***
@
text
@d48 1
d71 1
d126 2
a127 1
   { CmdWI,      "wi",    "Wait for an interrupt"    ,"?|P<n>|C[M]<n>|Msk<t>" ,WaitInterrupt     },
@


1.23
log
@PLL Lock control added
@
text
@d143 1
a143 1
   { CmdPLL,     "pll",   "Get set PLL lock method"  ,"?|0|1"              ,GetSetPll         },
@


1.22
log
@Allow payloads to be specified for CTIM interrupt simulation
@
text
@d32 1
d88 1
d143 2
@


1.21
log
@Logic chooses best module to connect to or read telegram from
Can force a connect to current module with "wi CM ..."
@
text
@d126 1
a126 1
   { CmdSI,      "si",    "Simulate an interrupt"    ,"?|T<n>P<n>|C<n>|Msk",SimulateInterrupt },
@


1.20
log
@*** empty log message ***
@
text
@d122 1
a122 1
   { CmdWI,      "wi",    "Wait for an interrupt"    ,"?|P<n>|C<n>|Msk<t>" ,WaitInterrupt     },
@


1.19
log
@Added UserMatrix printout
@
text
@d36 1
d73 1
d127 1
@


1.18
log
@Added real UTC capabilities
@
text
@d45 1
d79 1
d132 1
@


1.17
log
@Print telegram layout added
@
text
@d126 1
a126 1
   { CmdUTC,     "utc",   "Get UTC time"             ,""                   ,GetUtc            },
@


1.16
log
@Added WaitTgm
@
text
@d29 1
d77 1
d128 2
a129 1
   { CmdGTGM,    "tgm",   "Get telegram"             ,"?|[<Mch>|<n>]"      ,GetTelegram       },
@


1.15
log
@*** empty log message ***
@
text
@d27 1
d74 2
a75 1
   CmdTGM,   /* Get telegram */
d125 2
a126 1
   { CmdTGM,     "tgm",   "Get telegram"             ,"?|Machine"          ,GetTelegram       },
@


1.14
log
@*** empty log message ***
@
text
@d42 1
d62 1
d112 1
@


1.13
log
@*** empty log message ***
@
text
@d111 1
a111 1
   { CmdWI,      "wi",    "Wait for an interrupt"    ,"?|P<n>|C<n>|Msk"    ,WaitInterrupt     },
@


1.12
log
@GetSetCtim allows editing ctim frames
@
text
@d77 1
a77 1
   CmdCTM,   /* Show CTIM objects */
d114 1
a114 1
   { CmdPTM,     "ptm",   "Edit PTIM equipments"     ,"PtimId"             ,GetSetPtim        },
d126 1
a126 1
   { CmdCTM,     "ctm",   "Show CTIM objects"        ,"CtimId"             ,GetSetCtim           },
@


1.11
log
@*** empty log message ***
@
text
@d31 1
a31 1
int GetCtim();
d126 1
a126 1
   { CmdCTM,     "ctm",   "Show CTIM objects"        ,"CtimId"             ,GetCtim           },
@


1.10
log
@*** empty log message ***
@
text
@d41 1
d83 1
d131 2
a132 1
   { CmdLKM,     "lkm",   "Launch look at timing"    ,"P|C|H <eqp>"        ,LaunchLookat      } };
@


1.9
log
@Added hwt command
@
text
@d40 1
d81 1
d128 2
a129 1
   { CmdHWT,     "hwt",   "Launch hw-test program"   ,""                   ,LaunchHwTest      } };
@


1.8
log
@*** empty log message ***
@
text
@d39 1
d79 1
d125 2
a126 1
   { CmdVID,     "vid",   "Launch telegram video"    ,"?|Machine"          ,Video             } };
@


1.7
log
@*** empty log message ***
@
text
@d35 2
a36 1

d38 1
d66 1
d71 2
d110 3
a112 2
   { CmdREM,     "rem",   "Remote control a counter" ,"?|<Cnt>[<Flg>]"     ,GetSetRemote      },
   { CmdRCM,     "rcm",   "Send a remote command"    ,"?|<Cnt><Cmd>"       ,SetRemoteCmd      },
d115 1
a115 1
   { CmdMOD,     "mo",    "Get set module"           ,"Module"             ,GetSetModule      },
d117 2
@


1.6
log
@*** empty log message ***
@
text
@d36 2
d72 1
d100 1
a100 1
   { CmdWI,      "wi",    "Wait for an interrupt"    ,"P<n>|C<n>|Msk|?"    ,WaitInterrupt     },
d104 3
a106 3
   { CmdSI,      "si",    "Simulate an interrupt"    ,"T<n>P<n>|C<n>|Msk|?",SimulateInterrupt },
   { CmdREM,     "rem",   "Remote control a counter" ,"<Flg>[<Mod>|0]<Cnt>",GetSetRemote      },
   { CmdRCM,     "rcm",   "Send a remote command"    ,"<Cmd>[<Mod>|0]<Cnt>",SetRemoteCmd      },
d108 1
a108 1
   { CmdTGM,     "tgm",   "Get telegram"             ,"Machine"            ,GetTelegram       },
d114 2
a115 1
   { CmdCLD,     "ctmr",  "Load CTIM definitions"    ,""                   ,CtimRead          } };
@


1.5
log
@Works OK
@
text
@d34 1
d61 1
d102 2
a103 1
   { CmdREM,     "rem",   "Remote control a counter" ,"Counter"            ,GetSetRemote      },
@


1.4
log
@Compiles OK, starting to do tests
@
text
@d153 1
a153 1
  0 ,1,9,1,9,4,1,9,2,3,1,1,0,1,11,1,5,5,5,5,5,5,5,5,5,5,1,1,1,1,1,9,
@


1.3
log
@*** empty log message ***
@
text
@a8 1
int AHelp();                /* Assembler help     */
d21 2
a22 2
int GetSetQueueFlag();
int GetSetTimeOut();
d31 3
a33 3
int GetSetCtim();
int GetSetDebug();
int CtimLoad();
a42 1
   CmdAHELP, /* Assembler help     */
d65 1
a65 1
   CmdCTM,   /* Edit CTIM objects */
a83 1
   { CmdAHELP,   "ah" ,   "Help on assembler"        ,""                   ,AHelp   },
d93 1
a93 1
   { CmdVER      "ver",   "Get TimLib version"       ,""                   ,GetVersion        },
d96 2
a97 2
   { CmdQF,      "qf",    "Get set the queue flag"   ,"1/0"                ,GetSetQueueFlag   },
   { CmdTMO,     "tmo",   "Get set timeout"          ,"Timeout"            ,GetSetTimeOut     },
d103 1
a103 1
   { CmdMOD,     "mo",    "Get set module"           ,"Module"             ,GetModule         },
d106 3
a108 3
   { CmdCTM,     "ctm",   "Edit CTIM objects"        ,"CtimId"             ,GetSetCtim        },
   { CmdDEB,     "deb",   "Get set debug level"      ,"Level"              ,GetSetDebug       },
   { CmdCLD,     "ctmr",  "Load CTIM definitions"    ,""                   ,CtimLoad          } };
d183 1
d186 1
@


1.2
log
@*** empty log message ***
@
text
@d17 4
d29 3
a31 1
int GetModules();
d40 1
a40 1
   CmdNOCM,    /* llegal command */
d42 28
a69 22
   CmdQUIT,    /* Quit test program  */
   CmdHELP,    /* Help on commands   */
   CmdAHELP,   /* Assembler help     */
   CmdNEWS,    /* Show GMT test news */
   CmdHIST,    /* History            */
   CmdSHELL,   /* Shell command      */
   CmdSLEEP,   /* Sleep seconds      */
   CmdPAUSE,   /* Pause keyboard     */
   CmdATOMS,   /* Atom list commands */

   CmdWI,       /* Wait for an interrupt */
   CmdQF,       /* Get set the queue flag */
   CmdTMO,      /* Get set timeout */
   CmdPTM,      /* Edit PTIM equipments */
   CmdSI,       /* Simulate an interrupt */
   CmdREM,      /* Remote control a counter */
   CmdUTC,      /* Get UTC time */
   CmdTGM,      /* Get telegram */
   CmdMOD,      /* Show modules */
   CmdCTM,      /* Edit CTIM objects */
   CmdDEB,      /* Get set debug level */
   CmdCLD,      /* Load CTIM definitions */
d94 4
d106 3
a108 1
   { CmdMOD,     "mo",    "Show modules"             ,""                   ,GetModules        },
@


1.1
log
@Initial revision
@
text
@d17 13
d46 13
d80 14
a93 1
   { CmdATOMS,   "a" ,    "Atom list commands"       ,""                   ,Atoms   } };
@
